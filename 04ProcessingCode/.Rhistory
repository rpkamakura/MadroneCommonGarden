#LEM_est <- plot_model(LEM_reg, colors = "gs", show.values = TRUE, value.offset =0.5, vline.color = "#E4E3E3", title = "C", digits = 3) + theme_sjplot()
#grid.arrange(BSW_est, BEL_est, LEM_est, nrow = 2, ncol=2)
#totData
#totMData
colnms <- c("Ecoregion", "Source", "PH_OGR","PV_OGR","SF_OGR", "SO_OGR", "PH_DBK", "PV_DBK", "SF_DBK", "SO_DBK", "PH_PMT", "PV_PMT", "SF_PMT", "SO_PMT")
outputmat <- as.data.frame(matrix(0, nrow = length(unique(totData$Source)), ncol = length(colnms)))
names(outputmat) <- colnms
mat_ind <- 0
for (src in unique(totData$Source)){ #for each source
mat_ind <- mat_ind + 1
src_dat <- totData[totData$Source == src, ]
srcMort_dat <- totMData[totMData$Source == src, ]
outputmat$Source[mat_ind] <- src
outputmat$Ecoregion[mat_ind] <- src_dat$Ecoregion[1]
for (st in unique(src_dat$Site)) {#for each site
srcst_dat <- src_dat[src_dat$Site == st,]
srcMortst_dat <- srcMort_dat[srcMort_dat$Site == st,]
#find the average OGR, DBK, and PMT
#maybe add a standard deviation?
avg_ogr <- mean(na.omit(srcst_dat$TotGrowth))
#sd_ogr <- sd(na.omit(srcst_dat$TotGrowth))
avg_dbk <- mean(srcst_dat$AmntDieback)
#sd_dbk <- sd(srcst_dat$AmntDieback)
avg_pmt <- mean(na.omit(srcMortst_dat$PercDead))
#sd_pmt <- sd(na.omit(srcMortst_dat$PercDead))
if (st == "PH"){
outputmat$PH_OGR[mat_ind] <- avg_ogr
#outputmat$PH_OGR_SD[mat_ind] <- sd_ogr
outputmat$PH_DBK[mat_ind] <- avg_dbk
#outputmat$PH_DBK_SD[mat_ind] <- sd_dbk
outputmat$PH_PMT[mat_ind] <- avg_pmt
#outputmat$PH_PMT_SD[mat_ind] <- sd_pmt
} else if (st == "PV"){
outputmat$PV_OGR[mat_ind] <- avg_ogr
#outputmat$PV_OGR_SD[mat_ind] <- sd_ogr
outputmat$PV_DBK[mat_ind] <- avg_dbk
#outputmat$PV_DBK_SD[mat_ind] <- sd_dbk
outputmat$PV_PMT[mat_ind] <- avg_pmt
#outputmat$PV_PMT_SD[mat_ind] <- sd_pmt
} else if (st == "SF"){
outputmat$SF_OGR[mat_ind] <- avg_ogr
#outputmat$SF_OGR_SD[mat_ind] <- sd_ogr
outputmat$SF_DBK[mat_ind] <- avg_dbk
#outputmat$SF_DBK_SD[mat_ind] <- sd_dbk
outputmat$SF_PMT[mat_ind] <- avg_pmt
#outputmat$SF_PMT_SD[mat_ind] <- sd_pmt
} else if ( st == "SO"){
outputmat$SO_OGR[mat_ind] <- avg_ogr
#outputmat$SO_OGR_SD[mat_ind] <- sd_ogr
outputmat$SO_DBK[mat_ind] <- avg_dbk
#outputmat$SO_DBK_SD[mat_ind] <- sd_dbk
outputmat$SO_PMT[mat_ind] <- avg_pmt
#outputmat$SO_PMT_SD[mat_ind] <- sd_pmt
}
}
}
write.csv(outputmat, "../05ProcessedDataOutputs/06BasicVis/SourceAverages.csv")
#output is a table with 4 x 3 = 12 columns (24 if you have standard deviationz) and 52 (?) rows
#totData
#totMData
colnms <- c("Ecoregion", "Source", "PH_OGR","PV_OGR","SF_OGR", "SO_OGR", "PH_DBK", "PV_DBK", "SF_DBK", "SO_DBK", "PH_PMT", "PV_PMT", "SF_PMT", "SO_PMT")
outputmat <- as.data.frame(matrix(0, nrow = length(unique(totData$Source)), ncol = length(colnms)))
names(outputmat) <- colnms
mat_ind <- 0
for (src in unique(totData$Source)){ #for each source
mat_ind <- mat_ind + 1
src_dat <- totData[totData$Source == src, ]
srcMort_dat <- totMData[totMData$Source == src, ]
outputmat$Source[mat_ind] <- src
outputmat$Ecoregion[mat_ind] <- src_dat$Ecoregion[1]
for (st in unique(src_dat$Site)) {#for each site
srcst_dat <- src_dat[src_dat$Site == st,]
srcMortst_dat <- srcMort_dat[srcMort_dat$Site == st,]
#find the average OGR, DBK, and PMT
#maybe add a standard deviation?
avg_ogr <- mean(na.omit(srcst_dat$TotGrowth))
#sd_ogr <- sd(na.omit(srcst_dat$TotGrowth))
avg_dbk <- mean(srcst_dat$AmntDieback)
#sd_dbk <- sd(srcst_dat$AmntDieback)
avg_pmt <- mean(na.omit(srcMortst_dat$PercDead))
#sd_pmt <- sd(na.omit(srcMortst_dat$PercDead))
if (st == "PH"){
outputmat$PH_OGR[mat_ind] <- avg_ogr
#outputmat$PH_OGR_SD[mat_ind] <- sd_ogr
outputmat$PH_DBK[mat_ind] <- avg_dbk
#outputmat$PH_DBK_SD[mat_ind] <- sd_dbk
outputmat$PH_PMT[mat_ind] <- avg_pmt
#outputmat$PH_PMT_SD[mat_ind] <- sd_pmt
} else if (st == "PV"){
outputmat$PV_OGR[mat_ind] <- avg_ogr
#outputmat$PV_OGR_SD[mat_ind] <- sd_ogr
outputmat$PV_DBK[mat_ind] <- avg_dbk
#outputmat$PV_DBK_SD[mat_ind] <- sd_dbk
outputmat$PV_PMT[mat_ind] <- avg_pmt
#outputmat$PV_PMT_SD[mat_ind] <- sd_pmt
} else if (st == "SF"){
outputmat$SF_OGR[mat_ind] <- avg_ogr
#outputmat$SF_OGR_SD[mat_ind] <- sd_ogr
outputmat$SF_DBK[mat_ind] <- avg_dbk
#outputmat$SF_DBK_SD[mat_ind] <- sd_dbk
outputmat$SF_PMT[mat_ind] <- avg_pmt
#outputmat$SF_PMT_SD[mat_ind] <- sd_pmt
} else if ( st == "SO"){
outputmat$SO_OGR[mat_ind] <- avg_ogr
#outputmat$SO_OGR_SD[mat_ind] <- sd_ogr
outputmat$SO_DBK[mat_ind] <- avg_dbk
#outputmat$SO_DBK_SD[mat_ind] <- sd_dbk
outputmat$SO_PMT[mat_ind] <- avg_pmt
#outputmat$SO_PMT_SD[mat_ind] <- sd_pmt
}
}
}
write.csv(outputmat, "../05ProcessedDataOutputs/06BasicVis/SourceAverages.csv")
#output is a table with 4 x 3 = 12 columns (24 if you have standard deviationz) and 52 (?) rows
#totData
#totMData
sites <- c("PH", "PV", "SF", "SO")
for (st in sites){ #site loop
st_dat <- totData[totData$Site == st, ]
stMort_dat <- totMData[totMData$Site == st, ]
print(paste("Analyses at", st))
##TotGrowth
fit_tg <- aov(TotGrowth ~ Source, data=st_dat)
pairwise_tg <- TukeyHSD(fit_tg)[[1]] ##The problem is that this printout is monstrous
sig10_pair <- pairwise_tg[pairwise_tg[,4] < 0.1,] #just the ones under 0.1
sig05_pair <- pairwise_tg[pairwise_tg[,4] < 0.05,] #just the ones under 0.05
tot_num_pair <- length(pairwise_tg[,1])
num_sig05_pair <- sum(pairwise_tg[,4] < 0.05)
print(paste("Percent of total pairwise Total Growth sig at 0.05 is:", num_sig05_pair/tot_num_pair))
##Is it worth having the above in a CSV and save yourself some pain?
write.csv(sig05_pair, print(paste("../05ProcessedDataOutputs/06BasicVis/GRByFamilyTotGrowth_", st, ".csv", sep="")))
##NumDieback
fit_dbk <- aov(AmntDieback ~ Source, data=st_dat)
pairwise_dbk <- TukeyHSD(fit_dbk)[[1]] ##The problem is that this printout is monstrous
sig05_pair <- pairwise_dbk[pairwise_dbk[,4] < 0.05,] #just the ones under 0.05
tot_num_pair <- length(pairwise_dbk[,1])
num_sig05_pair <- sum(pairwise_dbk[,4] < 0.05)
print(paste("Percent of total pairwise Dieback sig at 0.05 is:", num_sig05_pair/tot_num_pair))
write.csv(sig05_pair, print(paste("../05ProcessedDataOutputs/06BasicVis/GRByFamilyDieback_", st, ".csv", sep="")))
##Mortality
##NumDieback
fit_pmt <- aov(PercDead ~ Source, data=stMort_dat)
pairwise_pmt <- TukeyHSD(fit_pmt)[[1]] ##The problem is that this printout is monstrous
sig05_pair <- pairwise_pmt[pairwise_pmt[,4] < 0.05,] #just the ones under 0.05
tot_num_pair <- length(pairwise_pmt[,1])
num_sig05_pair <- sum(pairwise_pmt[,4] < 0.05)
print(paste("Percent of total pairwise Mortality sig at 0.05 is:", num_sig05_pair/tot_num_pair))
write.csv(sig05_pair, print(paste("../05ProcessedDataOutputs/06BasicVis/GRByFamilyMort_", st, ".csv", sep="")))
}
s_ind <- 0
fam_nums <- as.data.frame(matrix(0, nrow = 105*4, ncol = 3))
names(fam_nums) <- c("Site", "Family", "num_fams")
fam_nums_bysite <- as.data.frame(matrix(0, nrow = 4, ncol = 2))
names(fam_nums_bysite) <- c("Site", "num_fams")
for (s in 1:length(sites)){
site <- sites[s]
d <- sitesdata[[s]]
d <- d[d$Year==12,]
for (f in unique(d$Family)){
s_ind <- s_ind + 1
fdat <- d[d$Family==f,]
nblocks <- length(unique(fdat$Block))
avg <- length(fdat$Tree)/nblocks
fam_nums[s_ind, 1] <- site
fam_nums[s_ind, 2] <- f
fam_nums[s_ind, 3] <- avg
}
fam_nums_bysite[s, 1] <- site
fam_nums_bysite[s, 2] <- mean(fam_nums[c(fam_nums[,1]==site),3])
}
#kmeans clustering
#scale functions
#silhouette method
fullClim <- read.csv("../01ExampleRawData/02LocationData/WeatherData.csv")
locData <- read.csv("../01ExampleRawData/02LocationData/LocClim.csv")
ecoregdat <- read.csv("../01ExampleRawData/02LocationData/EcoregionData.csv")
st_rows <- c(77,78,95, 92)
st_ind <- c(77, 77, 94, 91) #where the site should be in the cluster output file
GrowthRates = IndivHeights_byTree(sitesdata, years, sites)
condata <- IndivCond_final(sitesdata, sites)
output_mat <- as.data.frame(matrix(0, nrow=4, ncol=12))
names(output_mat) <- c("InGR", "InGR_SE", "OGR", "OGR_SE", "InDBK", "InDBK_SE", "ODBK", "ODBK_SE", "InMort", "InMort_SE", "OMort", "OMort_SE")
merData <- merge(locData, fullClim, by="Family")
merData <- merge(merData, ecoregdat, by="Family")
merData <- merData[,c(1, 6:8, 13, 21:39, 41:59, 64:99, 269)]
##EcoMap
EcoNums <- c(1,2,3,4,5,6,7)
names(EcoNums) <- c("PULO", "WIVA", "CORA", "KLMT", "CSCD", "SRNA", "CSCO")
merData$Eco <- EcoNums[merData$EcoregionShort]
##Should make sure the numbers are in some kind of reasonable order
merData$Eco <- as.numeric(as.factor(merData$EcoregionShort))
cs <- c(9,9,7,9)
st_eco <- c("PULO", "PULO", "WIVA", "KLMT")
sites <- names(GrowthRates)
##storing the p-values for bonferroni correction
pdf_cols <- c("o_pval", "a_pval", "site", "DepVar")
p_val_df <- as.data.frame(matrix(0, nrow=12, ncol=length(pdf_cols)))
names(p_val_df) <- pdf_cols
pdf_iter <- 0
for (s in 1:4){ #sites
#for storing p-values
pdf_iter <- pdf_iter + 1
site <- st_rows[s] #cg sites
locs <- merData[-c(st_rows[-s]),] #get rid of other cg
locs_rescale <- apply(locs[,c(2:79)], 2, scale)
locs_rescale <- cbind(locs_rescale, locs[,81])
rownames(locs_rescale) <- locs[,1]
colnames(locs_rescale) <- colnames(locs)[c(2:79, 81)]
locs_rescale <- as.data.frame(locs_rescale[,c(1:4, 10, 19, 48, 79)])
#create the clusters
c <- fviz_nbclust(locs_rescale, kmeans, method="silhouette")
print(c)
clusters <- kmeans(locs_rescale, centers = cs[s])
#print(clusters)
#pull out the local families
cg_cl <- clusters$cluster[[st_ind[s]]]
fams_CgClust <- names(clusters$cluster[clusters$cluster==cg_cl])
#cg_mn <- clusters$centers[cg_cl,]
other_mns <- c(1:max(clusters$cluster))[-cg_cl]
max_dist <- 0
fur_clust <- "NA"
for (o in other_mns){
dist_cl <- distance(x=clusters$centers[c(cg_cl,o),], method = "euclidean")
if(dist_cl > max_dist){
max_dist <- dist_cl
fur_clust <- o
}
}
#The most distant cluster
fams_OClust <- names(clusters$cluster[clusters$cluster==fur_clust])
##GET THE AVERAGES
site_GR <- GrowthRates[[s]]
site_Mort <- condata[[s]]
##Growth Rate
cg_cl_gr <- na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_CgClust])
#cg_cl_gr <- mean(na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_CgClust]))
#cg_cl_gr_se <- sd(na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_CgClust]))/sqrt(length(na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_CgClust])))
o_cl_gr <- na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_OClust])
#o_cl_gr <- mean(na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_OClust]))
#o_cl_gr_se <- sd(na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_OClust]))/sqrt(length(na.omit(site_GR$TotGrowth[site_GR$Family %in% fams_OClust])))
##dataframe with them
a <- length(cg_cl_gr)
b <- length(o_cl_gr)
tot_len <- a + b
gr_df <- as.data.frame(matrix(0, nrow = tot_len, ncol = 6))
names(gr_df) <- c("Site", "Group", "GR","NumLoc","NumDist", "AIC")
gr_df$Site <- rep("Site", tot_len)
gr_df$Group[1:a] <- rep("Local", a)
gr_df$GR[1:a] <- cg_cl_gr
gr_df$GR[(a + 1):(a+b)] <- o_cl_gr
gr_df$Group[(a + 1):(a+b)] <- rep("Dist", b)
gr_df$NumLoc[1] <- length(fams_CgClust)
gr_df$NumDist[1] <- length(fams_OClust)
gr_df$AIC[1] <- summary(aov(GR ~ Group, data = gr_df))[[1]][["Pr(>F)"]][1]
#store for correction later
p_val_df$o_pval[pdf_iter] <- gr_df$AIC[1]
p_val_df$site[pdf_iter]  <- sites[s]
p_val_df$DepVar[pdf_iter]  <- "Growth"
pdf_iter <- pdf_iter + 1
boxplot(GR~Group,data=gr_df, main=print(paste("Growth at", sites[s])),
xlab="Groups", ylab="Growth (cm)")
##Dieback
cg_cl_dbk <- na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_CgClust])
#cg_cl_dbk <- mean(na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_CgClust]))
#cg_cl_dbk_se <- sd(na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_CgClust]))/sqrt(length(na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_CgClust])))
o_cl_dbk <- na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_OClust])
#o_cl_dbk <- mean(na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_OClust]))
#o_cl_dbk_se <- sd(na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_OClust]))/sqrt(length(na.omit(site_GR$AmntDieback[site_GR$Family %in% fams_OClust])))
##dataframe with them
a <- length(cg_cl_dbk)
b <- length(o_cl_dbk)
tot_len <- a + b
dbk_df <- as.data.frame(matrix(0, nrow = tot_len, ncol = 6))
names(dbk_df) <- c("Site", "Group", "DBK","NumLoc","NumDist", "AIC")
dbk_df$Site <- rep(site, tot_len)
dbk_df$Group[1:a] <- rep("Local", a)
dbk_df$DBK[1:a] <- cg_cl_dbk
dbk_df$DBK[(a + 1):(a+b)] <- o_cl_dbk
dbk_df$Group[(a + 1):(a+b)] <- rep("Dist", b)
dbk_df$NumLoc[1] <- length(fams_CgClust)
dbk_df$NumDist[1] <- length(fams_OClust)
dbk_df$AIC[1] <- summary(aov(DBK ~ Group, data = dbk_df))[[1]][["Pr(>F)"]][1]
#store p-values for correction
p_val_df$o_pval[pdf_iter] <- dbk_df$AIC[1]
p_val_df$site[pdf_iter]  <- sites[s]
p_val_df$DepVar[pdf_iter]  <- "Dieback"
pdf_iter <- pdf_iter + 1
##Mortality
cg_cl_mort <- na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_CgClust])
#cg_cl_mort <- mean(na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_CgClust]))
#cg_cl_mort_se <- sd(na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_CgClust]))/sqrt(length(na.omit(site_Mort$PercDead[site_GR$Family %in% fams_CgClust])))
o_cl_mort <- na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_OClust])
#o_cl_mort <- mean(na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_OClust]))
# o_cl_mort_se <- sd(na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_OClust]))/sqrt(length(na.omit(site_Mort$PercDead[site_Mort$Family %in% fams_OClust])))
##dataframe with them
a <- length(cg_cl_mort)
b <- length(o_cl_mort)
tot_len <- a + b
mort_df <- as.data.frame(matrix(0, nrow = tot_len, ncol = 6))
names(mort_df) <- c("Site", "Group", "Mort","NumLoc","NumDist", "AIC")
mort_df$Site <- rep(site, tot_len)
mort_df$Group[1:a] <- rep("Local", a)
mort_df$Mort[1:a] <- cg_cl_mort
mort_df$Mort[(a + 1):(a+b)] <- o_cl_mort
mort_df$Group[(a + 1):(a+b)] <- rep("Dist", b)
mort_df$NumLoc[1] <- length(fams_CgClust)
mort_df$NumDist[1] <- length(fams_OClust)
mort_df$AIC[1] <- summary(aov(Mort ~ Group, data = mort_df))[[1]][["Pr(>F)"]][1]
#store p-values for correction
p_val_df$o_pval[pdf_iter] <- mort_df$AIC[1]
p_val_df$site[pdf_iter]  <- sites[s]
p_val_df$DepVar[pdf_iter]  <- "Mortality"
###
print(paste("For site", sites[s]))
print(fams_CgClust)
print(fams_OClust)
##GR
print(paste("Local GR: ", mean(gr_df$GR[gr_df$Group=="Local"])))
print(paste("Distant GR: ", mean(gr_df$GR[gr_df$Group=="Dist"])))
#DBK
print(paste("Local DBK: ", mean(dbk_df$DBK[dbk_df$Group=="Local"])))
print(paste("Distant DBK: ", mean(dbk_df$DBK[dbk_df$Group=="Dist"])))
#Mort
print(paste("Local Mort: ", mean(mort_df$Mort[mort_df$Group=="Local"])))
print(paste("Distant Mort: ", mean(mort_df$Mort[mort_df$Group=="Dist"])))
# print(paste("Growth in CG cluster:", cg_cl_gr, " and Growth in far cluster:", o_cl_gr))
# print(paste("Growth SE in CG cluster:", cg_cl_gr_se, " and Growth SEin far cluster:", o_cl_gr_se))
# print(paste("Dieback in CG cluster:", cg_cl_dbk, " and Dieback in far cluster:", o_cl_dbk))
# print(paste("Dieback SE in CG cluster:", cg_cl_dbk_se, " and Dieback SE in far cluster:", o_cl_dbk_se))
# print(paste("Mortality in CG cluster:", cg_cl_mort, " and Mortality in far cluster:", o_cl_mort))
# print(paste("Mortality SE in CG cluster:", cg_cl_mort_se, " and Mortality SE in far cluster:", o_cl_mort_se))
#output_mat[s,] <- c(cg_cl_gr, cg_cl_gr_se, o_cl_gr, o_cl_gr_se,
#                    cg_cl_dbk, cg_cl_dbk_se, o_cl_dbk, o_cl_dbk_se,
#                    cg_cl_mort, cg_cl_mort_se, o_cl_mort, o_cl_mort_se)
write.csv(gr_df, print(paste("../05ProcessedDataOutputs/07LocalDist/GrowthClust_",sites[s], ".csv", sep="")))
write.csv(dbk_df, print(paste("../05ProcessedDataOutputs/07LocalDist/DBKClust_",sites[s], ".csv", sep="")))
write.csv(mort_df, print(paste("../05ProcessedDataOutputs/07LocalDist/MortClust_",sites[s], ".csv", sep="")))
}
write.csv(p_val_df, "../05ProcessedDataOutputs/07LocalDist/LocalDistant_pvals.csv")
my_comparisons <- list(c("Distant", "Local"))
#GrowthRates = IndivHeights_byTree(sitesdata, years, sites)
#condata <- IndivCond_final(sitesdata, sites)
gr_allyrs <- rbindlist(GrowthRates)
con_allyrs <- rbindlist(condata)
gr_allyrs$Group <- rep(0, length(gr_allyrs[,1]))
con_allyrs$Group <- rep(0, length(con_allyrs[,1]))
sts <- c("PH", "PV", "SF", "SO")
PHloc <- c("BC3", "BC6","BC8","BR3","BR7","CB1","CL1","CR2","CR3","CR4","FB3","FB9","FW10","FW3",
"KM1","KM10", "OH1","OL1","PA1", "PA3","PA4","VI3","VI4", "VI5")
PHdist <- c("CA3", "CA4", "CC2", "CC4", "CC7", "LA10", "LA13", "LA5", "LA8", "SA5", "SA7", "SA8", "SC4", "SR2", "SR3")
PVloc <- c("BC3", "BC6","BC8","BR3","BR7","CB1","CL1","CR2","CR3","CR4","FB3","FB9","FW10","FW3",
"KM1","KM10", "OH1","OL1","PA1", "PA3","PA4","VI3","VI4", "VI5")
PVdist <- c("CA3", "CA4", "CC2", "CC4", "CC7", "LA10", "LA13", "LA5", "LA8", "SA5", "SA7", "SA8", "SC4", "SR2", "SR3")
SFloc <- c("AK3", "AK6", "AK9", "BR3", "OR1", "VE10", "VE5", "VE7", "WL3",
"WL8", "WV2", "WV6", "ZE1", "ZE4", "ZE6")
SFdist <- c("BL1", "BL2", "BL3", "CA3", "CA4", "CC2", "CC4", "CC7", "GA1", "GA2", "GA3", "HP1", "LA10", "LA13", "LA5", "LA8", "RV3", "RV4", "RV8", "SA5", "SA7", "SA8", "SC4", "SR2", "SR3")
SOloc <- c("BL1","BL2","BL3","CA3", "CA4","CC2","CC4","CC7","GA2","HP1","LA10","LA13","LA5","LA8",
"RV3","RV4",  "RV8","SA5","SA7","SA8","SC4","SR2","SR3" )
SOdist <- c("AK3", "AK6", "AK9","OR1","VE10","VE5","VE7","WL3","WL8", "WV2","WV6","ZE1","ZE4","ZE6" )
for (s in 1:4){ #sites
gr_rws <- c(gr_allyrs$Site == sts[s])
mort_rws <- c(con_allyrs$Site == sts[s])
if(s == 1){
GRst_inrws <- c(gr_allyrs$Family[gr_rws] %in% PHloc)
GRst_outrws <- c(gr_allyrs$Family[gr_rws] %in% PHdist)
Mortst_inrws <- c(con_allyrs$Family[mort_rws] %in% PHloc)
Mortst_outrws <- c(con_allyrs$Family[mort_rws] %in% PHdist)
} else if (s == 2){
GRst_inrws <- c(gr_allyrs$Family[gr_rws] %in% PVloc)
GRst_outrws <- c(gr_allyrs$Family[gr_rws] %in% PVdist)
Mortst_inrws <- c(con_allyrs$Family[mort_rws] %in% PVloc)
Mortst_outrws <- c(con_allyrs$Family[mort_rws] %in% PVdist)
} else if (s == 3){
GRst_inrws <- c(gr_allyrs$Family[gr_rws] %in% SFloc)
GRst_outrws <- c(gr_allyrs$Family[gr_rws] %in% SFdist)
Mortst_inrws <- c(con_allyrs$Family[mort_rws] %in% SFloc)
Mortst_outrws <- c(con_allyrs$Family[mort_rws] %in% SFdist)
} else if (s == 4){
GRst_inrws <- c(gr_allyrs$Family[gr_rws] %in% SOloc)
GRst_outrws <- c(gr_allyrs$Family[gr_rws] %in% SOdist)
Mortst_inrws <- c(con_allyrs$Family[mort_rws] %in% SOloc)
Mortst_outrws <- c(con_allyrs$Family[mort_rws] %in% SOdist)
}
gr_allyrs$Group[gr_rws][GRst_inrws] <- "Local"
gr_allyrs$Group[gr_rws][GRst_outrws] <- "Distant"
con_allyrs$Group[mort_rws][Mortst_inrws] <- "Local"
con_allyrs$Group[mort_rws][Mortst_outrws] <- "Distant"
}
p_gr <- ggplot(gr_allyrs, aes(x=Group, y=TotGrowth, fill=Site)) +
geom_boxplot() +
scale_x_discrete(limits=c("Local", "Distant")) +
scale_fill_brewer(palette="Greys") +
xlab("") + ylab("Total Growth (cm)") + ggtitle("A")
#stat_compare_means(method = "anova", label = "p.signif", label.y = c(300, 325, 350, 375, 400, 425))
p_dbk <- ggplot(gr_allyrs, aes(x=Group, y=AmntDieback, fill=Site)) +
geom_boxplot() +
scale_x_discrete(limits=c("Local", "Distant"))+
scale_fill_brewer(palette="Greys") +
xlab("") + ylab("Dieback (cm)") + ggtitle("B")
#stat_compare_means(comparisons = my_comparisons, method = "wilcox.test", label = "p.signif", label.y = c(300, 325, 350, 375, 400, 425))
p_mort <- ggplot(con_allyrs, aes(x=Group, y=PercDead, fill=Site)) +
geom_boxplot() +
scale_x_discrete(limits=c("Local", "Distant")) +
scale_fill_brewer(palette="Greys") +
xlab("") + ylab("Percent Mortality") + ggtitle("B")
#stat_compare_means(comparisons = my_comparisons, method = "wilcox.test", label = "p.signif", label.y = c(100, 110, 120, 130, 140, 150))
print(p_gr)
#print(p_dbk)
print(p_mort)
grid.arrange(p_gr, p_mort, nrow = 2)
##reading in the csv you created before
p_val_df <- read.csv("../05ProcessedDataOutputs/LocalDistant_pvals.csv")
##reading in the csv you created before
p_val_df <- read.csv("../05ProcessedDataOutputs/07LocalDist/LocalDistant_pvals.csv")
adjusted <- p.adjust(p_val_df$o_pval, method = "bonferroni", n = length(p_val_df$o_pval))
p_val_df$a_pval <- adjusted
write.csv(p_val_df, "../05ProcessedDataOutputs/07LocalDist/LocalDistant_MultComp_pvals.csv")
GrowthRates = PercGrowth_byTree(sitesdata, years, sites)
condata <- IndivCond_final(sitesdata, sites)
WVFams <- c("VE10", "VE5","VE7", "ZE1", "ZE4", "ZE6", "WL3", "WL8")
output_mat <- as.data.frame(matrix(0, nrow=4, ncol=8))
names(output_mat) <- c("GR", "GR_SE", "WV_GR", "WV_GR_SE", "Mort", "Mort_SE", "WV_Mort", "WV_Mort_SE")
for (s in 1:4){ #sites
site <- sites[s] #cg sites
##GET THE AVERAGES
site_GR <- GrowthRates[[s]]
site_Mort <- condata[[s]]
##Growth
##Growth Rate
GR_total <- mean(na.omit(site_GR$TotGrowth))
GR_total_se <- sd(na.omit(site_GR$TotGrowth))/sqrt(length(na.omit(site_GR$TotGrowth)))
GR_WV <- mean(na.omit(site_GR$TotGrowth[site_GR$Family %in% WVFams]))
GR_WV_se <- sd(na.omit(site_GR$TotGrowth[site_GR$Family %in% WVFams]))/sqrt(length(na.omit(site_GR$TotGrowth[site_GR$Family %in% WVFams])))
##Mortality
Mort_total <- mean(na.omit(site_Mort$PercDead))
Mort_total_se <- sd(na.omit(site_Mort$PercDead))/sqrt(length(na.omit(site_Mort$PercDead)))
Mort_WV <- mean(na.omit(site_Mort$PercDead[site_Mort$Family %in% WVFams]))
Mort_WV_se <- sd(na.omit(site_Mort$PercDead[site_Mort$Family %in% WVFams]))/sqrt(length(na.omit(site_Mort$PercDead[site_Mort$Family %in% WVFams])))
output_mat[s,] <- c(GR_total, GR_total_se, GR_WV, GR_WV_se, Mort_total, Mort_total_se, Mort_WV, Mort_WV_se)
}
GrowthRates = IndivHeights_byTree(sitesdata, years, sites)
PH <- GrowthRates[[1]]
PV <- GrowthRates[[2]]
SF <- GrowthRates[[3]]
SO <- GrowthRates[[4]]
##PH - Slope
PH_df <- PH
PH_df$Slope2 <- (PH$Slope)^2
PH_reg <- mixed_model(AmntDieback ~ Slope + Slope2, random = ~1|Block,
data = PH_df, family = hurdle.lognormal(), zi_fixed = ~1, iter_EM = 0)
PH_ints <- confint(PH_reg)
##PV - ElevDist
PV_df <- PV
PV_df$ElevDist2 <- (PV$ElevDist)^2
PV_reg <- mixed_model(AmntDieback ~ ElevDist + ElevDist2, random = ~1|Block,
data = PV_df, family = hurdle.lognormal(), zi_fixed = ~1, iter_EM = 0)
PV_ints <- confint(PV_reg)
##SF - Ecoregion + ElevDist
SF_df <- SF
SF_df$ElevDist2 <- (SF$ElevDist)^2
SF_df$Ecoregion <- relevel(as.factor(SF_df$Ecoregion), ref="WIVA")
SF_reg <- mixed_model(AmntDieback ~ Ecoregion + ElevDist + ElevDist2, random = ~1|Block,
data = SF_df, family = hurdle.lognormal(), zi_fixed = ~1, iter_EM = 0)
SF_ints <- confint(SF_reg)
##SO - ElevDist + eFFP + DD5_sp
SO_df <- SO
SO_df$ElevDist2 <- (SO$ElevDist)^2
SO_df$eFFP2 <- (SO$eFFP)^2
SO_df$DD.5.sp2 <- (SO$DD.5.sp)^2
SO_reg <- mixed_model(AmntDieback ~ ElevDist + ElevDist2 + eFFP + eFFP2 + DD.5.sp + DD.5.sp2, random = ~1|Block,
data = SO_df, family = hurdle.lognormal(), zi_fixed = ~1, iter_EM = 0)
SO_ints <- confint(SO_reg)
#Store Values
num_rws <- 2 + 2 + 8 + 6
sto_nms <- c("Site", "DepVar", "IndepVar", "Lower", "Estimates", "Upper")
sto_mat <- as.data.frame(matrix(0, ncol=length(sto_nms), nrow = num_rws))
names(sto_mat) <- sto_nms
PH_rws <- c(1,2)
PV_rws <- c(3,4)
SF_rws <- 5:12
SO_rws <- 13:18
sto_mat$DepVar <- rep("Dieback", num_rws)
##PH
sto_mat$Site[PH_rws] <- rep("PH", 2)
sto_mat$IndepVar[PH_rws] <- rownames(PH_ints)[c(2,3)]
sto_mat$Lower[PH_rws] <- PH_ints[c(2,3),1]
sto_mat$Estimates[PH_rws] <- PH_ints[c(2,3),2]
sto_mat$Upper[PH_rws] <- PH_ints[c(2,3), 3]
##PV
sto_mat$Site[PV_rws] <- rep("PV", 2)
sto_mat$IndepVar[PV_rws] <- rownames(PV_ints)[c(2,3)]
sto_mat$Lower[PV_rws] <- PV_ints[c(2,3),1]
sto_mat$Estimates[PV_rws] <- PV_ints[c(2,3),2]
sto_mat$Upper[PV_rws] <- PV_ints[c(2,3), 3]
##SF
sto_mat$Site[SF_rws] <- rep("SF", 8)
sto_mat$IndepVar[SF_rws] <- rownames(SF_ints)[c(2:9)]
sto_mat$Lower[SF_rws] <- SF_ints[c(2:9),1]
sto_mat$Estimates[SF_rws] <- SF_ints[c(2:9),2]
sto_mat$Upper[SF_rws] <- SF_ints[c(2:9), 3]
##SO
sto_mat$Site[SO_rws] <- rep("SO", 6)
sto_mat$IndepVar[SO_rws] <- rownames(SO_ints)[c(2:7)]
sto_mat$Lower[SO_rws] <- SO_ints[c(2:7),1]
sto_mat$Estimates[SO_rws] <- SO_ints[c(2:7),2]
sto_mat$Upper[SO_rws] <- SO_ints[c(2:7), 3]
write.csv(sto_mat,"../05ProcessedDataOutputs/06BasicVis/Dieback_intervals.csv")
ctrl <- lmeControl(opt='optim')
PhenData <- read.csv("../01ExampleRawData/01CondGrowthPhen/SF_Phen_AlldataRaw.csv")
PhenData$Ecoregion <- relevel(as.factor(PhenData$Ecoregion), ref="WIVA")
phen_reg <- lme(Bud.Elongating ~ Ecoregion + Long + Elev + eFFP + MSP + Slope + Aspect + DD.5.sp, random = ~1|Block, data = PhenData, na.action = na.omit, control = ctrl, method="ML")
summary(phen_reg)
