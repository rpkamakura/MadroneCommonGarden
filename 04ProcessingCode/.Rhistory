AICnm_list <-append(AICnm_list, p_fullname)
##If there is nothing left to add
if (length(layer5_nums) == 0){
break
}
#Move to layer 6######################################################################
layer6_nums = layer5_nums #so you have a list you can remove things from
for(num_l6 in layer5_nums){
num_iter = match(num_l6, layer6_nums)
layer6_nums <- layer6_nums[-num_iter]
param_n <- c(num_l1, num_l2, num_l3, num_l4, num_l5, num_l6) #the parameter numbers to use
#Do the regression
p_fullname <- paste(paramlist[param_n], collapse="_") #get the parameter names
params_ind <- match(paramlist[param_n], colnames(PhenData))
reg6 <- MultReg3(PhenData, params_ind, DepVarInd, RandVar)
#Save the AIC values
AIC_list <- append(AIC_list, AIC(reg6[[2]]))
AICnm_list <-append(AICnm_list, p_fullname)
##If there is nothing left to add
if (length(layer6_nums) == 0){
break
}
#Move to layer 7######################################################################
layer7_nums = layer6_nums #so you have a list you can remove things from
for(num_l7 in layer6_nums){
num_iter = match(num_l7, layer7_nums)
layer7_nums <- layer7_nums[-num_iter]
param_n <- c(num_l1, num_l2, num_l3, num_l4, num_l5, num_l6, num_l7) #the parameter numbers to use
#Do the regression
p_fullname <- paste(paramlist[param_n], collapse="_") #get the parameter names
params_ind <- match(paramlist[param_n], colnames(PhenData))
reg7 <- MultReg3(PhenData, params_ind, DepVarInd, RandVar)
#Save the AIC values
AIC_list <- append(AIC_list, AIC(reg7[[2]]))
AICnm_list <-append(AICnm_list, p_fullname)
##If there is nothing left to add
if (length(layer7_nums) == 0){
break
}
#Move to layer 8######################################################################
layer8_nums = layer7_nums #so you have a list you can remove things from
for(num_l8 in layer7_nums){
num_iter = match(num_l8, layer8_nums)
layer8_nums <- layer8_nums[-num_iter]
param_n <- c(num_l1, num_l2, num_l3, num_l4, num_l5, num_l6, num_l7, num_l8) #the parameter numbers to use
#Do the regression
p_fullname <- paste(paramlist[param_n], collapse="_") #get the parameter names
params_ind <- match(paramlist[param_n], colnames(PhenData))
reg8 <- MultReg3(PhenData, params_ind, DepVarInd, RandVar)
#Save the AIC values
AIC_list <- append(AIC_list, AIC(reg8[[2]]))
AICnm_list <-append(AICnm_list, p_fullname)
##If there is nothing left to add
if (length(layer8_nums) == 0){
break
}
#Move to layer 9######################################################################
layer9_nums = layer8_nums #so you have a list you can remove things from
for(num_l9 in layer8_nums){
num_iter = match(num_l9, layer9_nums)
layer9_nums <- layer9_nums[-num_iter]
param_n <- c(num_l1, num_l2, num_l3, num_l4, num_l5, num_l6, num_l7, num_l8, num_l9) #the parameter numbers to use
#Do the regression
p_fullname <- paste(paramlist[param_n], collapse="_") #get the parameter names
params_ind <- match(paramlist[param_n], colnames(PhenData))
reg9 <- MultReg3(PhenData, params_ind, DepVarInd, RandVar)
#Save the AIC values
AIC_list <- append(AIC_list, AIC(reg9[[2]]))
AICnm_list <-append(AICnm_list, p_fullname)
##If there is nothing left to add
if (length(layer9_nums) == 0){
break
}
} #end layer 9
} #end layer 8
} # end layer 7
} #end layer 6
} #end layer 5
} #end layer 4
} #end layer 3
} #end layer 2
} #end layer 1
print(paste("Results for", phen_nm))
min_aic <- min(AIC_list)
within2_aic <- AIC_list[AIC_list < (min_aic + 2)]
within2_names <- AICnm_list[AIC_list < (min_aic + 2)]
print(within2_aic)
print(within2_names)
if(phen ==1){
nrows = length(within2_aic)
Phen_AICmat <- matrix(NA, nrow=nrows, ncol=3)
colnames(Phen_AICmat) <- c("Phen", "IndepVars", "AIC")
Phen_AICmat[,1] <- rep(phen_nm, nrows)
Phen_AICmat[,2] <- within2_names
Phen_AICmat[,3] <- within2_aic
} else {
nrows = length(within2_aic)
#Rather convoluted way to add the matrices together
oldAICmat = Phen_AICmat
Phen_AICmat = matrix(NA, nrow = length(oldAICmat[,1]) + nrows, ncol = length(oldAICmat[1,]))
colnames(Phen_AICmat) = colnames(oldAICmat)
Phen_AICmat[,1] <- append(oldAICmat[,1], rep(phen_nm, nrows))
Phen_AICmat[,2] <- append(oldAICmat[,2], within2_names)
Phen_AICmat[,3] <- append(oldAICmat[,3], within2_aic)
}
} #end the loop for each phenology type
write.csv(Phen_AICmat, "../05ProcessedDataOutputs/05BestModels/PhenBestMultReg.csv")
regdata <- as.data.frame(Phen_AICmat)
paramlist <- c("Ecoregion", "Lat", "Long", "Elev", "eFFP", "MSP", "Slope", "Aspect", "DD.5.sp")
####NEED TO ADAPT THE FOLLOWING
for (phen in 1:3) {#For each response variable
#which dependent variable you have
if (phen == 1){
dvarnm <- "Bud.Swollen"
} else if (phen == 2){
dvarnm <- "Bud.Elongating"
} else if (phen == 3) {
dvarnm <- "Leaves.emerging"
}
DepVarInd <- match(dvarnm, colnames(PhenData))
TotNumIndep <- 0
TotIndepNm <- c()
##Initialize parameter lists
aic_vals <- c()
r2m_vals <- c()
r2c_vals <- c()
upper_int <- c()
lower_int <- c()
est_param <- c()
p_vals <- c()
##Site index and pertinent regressions
pert_regs <- regdata[(regdata$Phen == dvarnm),] #find the regressions for that variable
reg_nms <- c()
for (reg in 1:length(pert_regs[,1])){ #For each regression
indep_vars <- unlist(strsplit(pert_regs[reg, 2], "_")) #split the variables up
indep_ind <- match(indep_vars, colnames(PhenData)) #get the indexes for the independent variables
indep_func_ind <- match(indep_vars, paramlist) #get the index for their function types
##Add the names of/number of independent variables to the corresponding lists
for (var in indep_vars){
if (var == "Ecoregion"){
TotNumIndep <- TotNumIndep + 6 #for all the ecoregions
TotIndepNm <- append(TotIndepNm, c("CSCD", "CSCO", "KLMT", "PULO", "SRNA", "WIVA"))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 2], 6))
} else {
TotNumIndep <- TotNumIndep + 1
TotIndepNm <- append(TotIndepNm, var)
reg_nms <- append(reg_nms, pert_regs[reg, 2])
}
}
RandVar <- match("Block", colnames(PhenData)) #random variable
reg_results <- MultReg3(PhenData, indep_ind, DepVarInd, RandVar)
reg_df <- reg_results[[1]] #the dataframe
reg_obj <- reg_results[[2]] #the lme object
reg_sum <- summary(reg_obj)
reg_r2 <- r.squaredGLMM(reg_obj)
reg_int <- intervals(reg_obj, which = "fixed")
aic_vals <- append(aic_vals, reg_sum$AIC)
r2m_vals <- append(r2m_vals, reg_r2[1])
r2c_vals <- append(r2c_vals, reg_r2[2])
num_pert_rws <- length(reg_int$fixed[,1])
num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
#######DO a QQ PLOT
print(paste("QQ Plot for", pert_regs[reg, 2], "for phen:", phen))
qq_plot <- qqnorm(reg_obj)
print(qq_plot)
#Heteroskedasticity
print(paste("Fitted vs Residual Plot for", pert_regs[reg, 2], "for phen:", phen))
het_plot <- plot(reg_obj)
print(het_plot)
} #for each regression
if (phen==1){
#Overall Model Matrix
nrowsOverall = length(pert_regs[,1])
o_cols <- c("Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- rep(dvarnm, nrowsOverall)
overal_mod[,2] <- pert_regs[, 2]
overal_mod[,3] <- rep("Block", nrowsOverall)
overal_mod[,4] <- aic_vals
overal_mod[,5] <- r2m_vals
overal_mod[,6] <- r2c_vals
#Parameter Matrix
nrowsParam <- TotNumIndep
param_cols <- c("Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- reg_nms
param_mat[,2] <- rep(dvarnm, nrowsParam)
param_mat[,3] <- TotIndepNm
param_mat[,4] <- est_param
param_mat[,5] <- lower_int
param_mat[,6] <- upper_int
param_mat[,7] <- p_vals
} else { #depending on which Phenological Var you're on
#Rather convoluted way to add the matrices together
##Overall Matrix
nrowsOverall = length(pert_regs[,1]) + length(overal_mod[,1])
nrows_nw <- length(pert_regs[,1])
oldOveralmat = overal_mod
o_cols <- c("Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- append(oldOveralmat[,1], rep(dvarnm, nrows_nw))
overal_mod[,2] <- append(oldOveralmat[,2], pert_regs[, 2])
overal_mod[,3] <- append(oldOveralmat[,3], rep("Block", nrows_nw))
overal_mod[,4] <- append(oldOveralmat[,4], aic_vals)
overal_mod[,5] <- append(oldOveralmat[,5], r2m_vals)
overal_mod[,6] <- append(oldOveralmat[,6], r2c_vals)
##Parameter Matrix
nrowsParam <- TotNumIndep + length(param_mat[,1])
oldParammat = param_mat
param_cols <- c("Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- append(oldParammat[,1], reg_nms)
param_mat[,2] <- append(oldParammat[,2], rep(dvarnm, TotNumIndep))
param_mat[,3] <- append(oldParammat[,3], TotIndepNm)
param_mat[,4] <- append(oldParammat[,4], est_param)
param_mat[,5] <- append(oldParammat[,5], lower_int)
param_mat[,6] <- append(oldParammat[,6], upper_int)
param_mat[,7] <- append(oldParammat[,7], p_vals)
} #depending on which Phenological Var you're on
} #dependent variable for loop
##Write data to CSV
write.csv(overal_mod, "../05ProcessedDataOutputs/05BestModels/Phen_BestModelResults.csv")
write.csv(param_mat, "../05ProcessedDataOutputs/05BestModels/Phen_BestParamResults.csv")
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(MASS)
library(MuMIn)
library(caret)
#library(ModelMetrics) #for brier score
source("../04ProcessingCode/BackgroundFunctions/01AnalysisFunctions_GRMort.R")
source("../04ProcessingCode/BackgroundFunctions/02RegressionFuncs.R")
options(stringsAsFactors = FALSE)
#Names
years <- c(12, 13, 14, 15)
#years <- c(14,15)
sites <- c("PuyallupValley", "PuyallupHill", "Starker", "Sprague")
##Get the full data files
pertfiles <- list("../03ExampleCleanedData/PVFulldata.csv", "../03ExampleCleanedData/PHFulldata.csv", "../03ExampleCleanedData/SFFulldata.csv", "../03ExampleCleanedData/SOFulldata.csv")
sitesdata <- lapply(pertfiles,read.csv)
names(sitesdata) <- sites
##Phenology data
PhenData <- read.csv("../01ExampleRawData/01CondGrowthPhen/SF_Phen_AlldataRaw.csv")
##Find the list of the best models for each variable
regdata <- lapply(list("../05ProcessedDataOutputs/PhenBestMultReg.csv", "../05ProcessedDataOutputs/TotGrowth_BestMultReg.csv", "../05ProcessedDataOutputs/MortalityBestMultReg.csv"), read.csv)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(MASS)
library(MuMIn)
library(caret)
#library(ModelMetrics) #for brier score
source("../04ProcessingCode/BackgroundFunctions/01AnalysisFunctions_GRMort.R")
source("../04ProcessingCode/BackgroundFunctions/02RegressionFuncs.R")
options(stringsAsFactors = FALSE)
#Names
years <- c(12, 13, 14, 15)
#years <- c(14,15)
sites <- c("PuyallupValley", "PuyallupHill", "Starker", "Sprague")
##Get the full data files
pertfiles <- list("../03ExampleCleanedData/PVFulldata.csv", "../03ExampleCleanedData/PHFulldata.csv", "../03ExampleCleanedData/SFFulldata.csv", "../03ExampleCleanedData/SOFulldata.csv")
sitesdata <- lapply(pertfiles,read.csv)
names(sitesdata) <- sites
##Phenology data
PhenData <- read.csv("../01ExampleRawData/01CondGrowthPhen/SF_Phen_AlldataRaw.csv")
##Find the list of the best models for each variable
regdata <- lapply(list("../05ProcessedDataOutputs/05BestModels/PhenBestMultReg.csv", "../05ProcessedDataOutputs/05BestModels/TotGrowth_BestMultReg.csv", "../05ProcessedDataOutputs/05BestModels/MortalityBestMultReg.csv"), read.csv)
#regdata <- lapply(list("./Data Analysis/033121PhenBestMultReg.csv","./Data Analysis/040121_TotGrowth_BestMultReg12to13.csv","./Data Analysis/040121_AmntDieback_BestMultReg12to13.csv", "./Data Analysis/033121MortalityBestMultReg12to13.csv"), read.csv)
##Mortality data
MortData <- IndivCond_final(sitesdata, sites)
##Growth Rate and Dieback Data
GrDbkData <- IndivHeights_byTree(sitesdata, years, sites)
#GrDbkData <- PercGrowth_byTree(sitesdata, years, sites)
functype <- c("E", "L", "Q", "Q", "Q", "Q", "Q", "Q", "Q")
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(MASS)
library(MuMIn)
library(caret)
#library(ModelMetrics) #for brier score
source("../04ProcessingCode/BackgroundFunctions/01AnalysisFunctions_GRMort.R")
source("../04ProcessingCode/BackgroundFunctions/02RegressionFuncs.R")
options(stringsAsFactors = FALSE)
#Names
years <- c(12, 13, 14, 15)
#years <- c(14,15)
sites <- c("PuyallupValley", "PuyallupHill", "Starker", "Sprague")
##Get the full data files
pertfiles <- list("../03ExampleCleanedData/PVFulldata.csv", "../03ExampleCleanedData/PHFulldata.csv", "../03ExampleCleanedData/SFFulldata.csv", "../03ExampleCleanedData/SOFulldata.csv")
sitesdata <- lapply(pertfiles,read.csv)
names(sitesdata) <- sites
##Phenology data
PhenData <- read.csv("../01ExampleRawData/01CondGrowthPhen/SF_Phen_AlldataRaw.csv")
##Find the list of the best models for each variable
regdata <- lapply(list("../05ProcessedDataOutputs/05BestModels/PhenBestMultReg.csv", "../05ProcessedDataOutputs/05BestModels/TotGrowth_BestMultReg.csv", "../05ProcessedDataOutputs/05BestModels/MortalityBestMultReg.csv"), read.csv)
#regdata <- lapply(list("../05ProcessedDataOutputs/05BestModels/PhenBestMultReg.csv",
#"../05ProcessedDataOutputs/05BestModels/TotGrowth_BestMultReg12to13.csv",
#"../05ProcessedDataOutputs/05BestModels/AmntDieback_BestMultReg12to13.csv",
#"../05ProcessedDataOutputs/05BestModels/MortalityBestMultReg12to13.csv"), read.csv)
##Mortality data
MortData <- IndivCond_final(sitesdata, sites)
##Growth Rate and Dieback Data
GrDbkData <- IndivHeights_byTree(sitesdata, years, sites)
#GrDbkData <- PercGrowth_byTree(sitesdata, years, sites)
functype <- c("E", "L", "Q", "Q", "Q", "Q", "Q", "Q", "Q")
###Skeleton cross-validation - using caret package
##Phenology first to test it - it is simpler
###you want to try to stratify by family though (or at least by Source)
d_vars <- c("Phenology", "TotGrowth", "PercDead")
Phen_types <- c("Bud.Swollen", "Bud.Elongating", "Leaves.emerging")
dvar <- 0 #just to keep track of whcih one you're on
k_fold <- 5
for (DepVar in regdata) { #For each response variable
dvar <- dvar + 1
if (dvar ==1){
#just for right now since you should already have phenology
##how many groups (variables) there are
n <- 3
##set up the dataframe and grouping variable
df <- PhenData
df <- df[complete.cases(df), ] #get rid of the NAs basically
df_class <- df$Name
RandVar <- match("Block", colnames(df)) #random variable
##Create training and test datasets
folds <- createFolds(df_class, list = FALSE, k = k_fold)
paramlist <- c("Ecoregion", "Lat", "Long", "Elev", "eFFP",
"MSP", "Slope", "Aspect", "DD.5.sp")
#next #just for now
} else if (dvar == 2 || dvar == 3){
n <- 4 #the number of sites for Growth Rate, Dieback, and Mortality
paramlist <- c("Ecoregion", "Dist", "Slope", "Aspect", "ElevDist", "eFFP", "MSP", "DD.5.sp")
}
#######################################################################
for (grp in 1:n){ ##the groupings, either by site or by phen for phenology
##MAE list
mae_vals <- c()
if (dvar == 1) { ##Phenology
grps <- c("Bud.Swollen", "Bud.Elongating", "Leaves.emerging")
grp_col <- match(grps[grp], names(PhenData))
grp_nm <- Phen_types[grp]
pert_regs <- DepVar[DepVar$Phen == grp_nm,]
ntrials = NA
f = "linear"
} else if (dvar == 2 ){ #growth rate
grp_nm <- names(GrDbkData)[grp]
df <- GrDbkData[[grp]]
df <- df[complete.cases(df), ] #get rid of the NAs basically
df_class <- df$Source
binomial = FALSE
folds <- createFolds(df_class, list = FALSE, k = k_fold)
if (dvar == 2){
grp_col <- match("TotGrowth", colnames(df))
RandVar <- match("Block", colnames(df)) #random variable
f = "linear"
# } else {
#
#   grp_col <- match("AmntDieback", colnames(df))
#   RandVar <- match("Block", colnames(df)) #random variable
#   f = "zeroinfl"
#
}
pert_regs <- DepVar[(DepVar$Site == grp_nm),] #find the regressions for that site
} else if (dvar == 3){ #Mortality
grp_nm <- names(MortData)[grp]
df <- MortData[[grp]]
df <- df[complete.cases(df), ] #get rid of the NAs basically
df_class <- df$Source
binomial = TRUE
folds <- createFolds(df_class, list = FALSE, k = k_fold)
grp_col <- match("PercDead", colnames(df))
RandVar <- match("Block", colnames(df)) #random variable
ntrials <- match("Total", colnames(df))
pert_regs <- DepVar[(DepVar$Site == grp_nm),] #find the regressions for that site
f = "binomial"
} ## end of training dataset deliniation loop
######################################################################
for (k in 1:k_fold){
##Initialize parameter lists
Train <- df[(folds!=k),]
Test  <- df[(folds==k),]
reg_mae <- c()
for (reg in 1:length(pert_regs[,1])){ #For each regression
indep_vars <- unlist(strsplit(pert_regs$IndepVars[reg], "_")) #split the variables up
indep_ind <- match(indep_vars, colnames(df)) #get the indexes for the independent variables
indep_func_ind <- match(indep_vars, paramlist) #get the index for their function types
if (dvar ==1|| dvar==3){ ##for the phenology data
reg_res1 <- MultReg3(Train, indep_ind, grp_col, RandVar, family = f, priorw = ntrials)
#reg_results
res1_df <- reg_res1[[1]]
res1_obj <- reg_res1[[2]]
##should be able to use the function predict, but you have to create the right format of df
Test_df <- as.data.frame(matrix(0, nrow = length(Test[,1]), ncol = length(res1_df)))
names(Test_df) <- names(res1_df)
if (dvar == 3){
for (c in 1:length(res1_df)){
if (c == 1){
Test_df[,c] <- Test[,grp_col] #Dependent Variable
} else if (c != length (res1_df)){
if( c == (length(res1_df)-1)){
Test_df[,c] <- Test[,RandVar] #Random Variable
} else {
Test_df[,c] <- Test[,indep_ind[(c-1)]] #Independent Variables
}
} else {
Test_df[,c] <- Test[,ntrials]
}
}
} else {
for (c in 1:length(res1_df)){
if (c == 1){
Test_df[,c] <- Test[,grp_col] #Dependent Variable
} else if (c != length (res1_df)){
Test_df[,c] <- Test[,indep_ind[(c-1)]] #Independent Variables
} else {
Test_df[,c] <- Test[,RandVar] #Random Variable
}
}
}
if (dvar==3 && (length(Test_df[1,]) > 4)){ #to deal with the rescaling that you have to do
toRescale <- Test_df[,!(names(Test_df) %in% c("dep_dat", "rand1_dat", "ntrials"))]
numcols <- c(1:length(toRescale[1,]))[sapply(toRescale[1,], is.numeric)]
toRescale[,numcols] <- scale(toRescale[,numcols])
Test_df[,!(names(Test_df) %in% c("dep_dat", "rand1_dat", "ntrials"))] <- toRescale
}
predictions <- res1_obj %>% predict(Test_df, type = "response")  #predict(res1_obj, Test_df)
if (dvar == 1){
#mae_v <- RMSE(as.vector(predictions), Test[,grp_col])
mae_v <- MAE(as.vector(predictions), Test[,grp_col])
} else {
#mae_v <- RMSE(Test[,grp_col],as.vector(predictions))
mae_v <- MAE(as.vector(predictions), Test[,grp_col])
}
} else { ##for everything except the Phenology ones
types <- functype[indep_func_ind] #get the function types
##Add the names of/number of independent variables to the corresponding lists
reg_res1 <- MultReg2(Train, indep_ind, grp_col, types, RandVar, family = f)
res1_df <- reg_res1[[1]]
res1_obj <- reg_res1[[2]]
##should be able to use the function predict, but you have to create the right format of df
Test_df <- as.data.frame(matrix(0, nrow = length(Test[,1]), ncol = length(res1_df)))
names(Test_df) <- names(res1_df)
sq <- FALSE
test_ind <- 1
for (c in 1:length(res1_df)){
if (c == 1){
Test_df[,c] <- Test[,grp_col] #Dependent Variable
} else if (c == length(res1_df)) {
Test_df[,c] <- Test[,RandVar] #Random Variable
} else if (types[test_ind] == "E" || types[test_ind] == "L") {
Test_df[,c] <- Test[,indep_ind[(c-1)]] #Independent Variables
test_ind <- test_ind + 1
} else { #not at the end and not a linear term (so the quadratic terms)
if (sq) { #if it is the square of a value
Test_df[,c] <- (Test[,indep_ind[(test_ind)]])^2 #Independent Variable Squared
sq <- FALSE
if (test_ind < length(types)){
test_ind <- test_ind + 1
}
} else {
Test_df[,c] <- Test[,indep_ind[(test_ind)]] #Independent Variables
sq <- TRUE
}
}
}
predictions <- predict(res1_obj, Test_df)
mae_v <- MAE(as.vector(predictions), Test[,grp_col])
#mae_v <- RMSE(as.vector(predictions), Test[,grp_col])
} #end of gr, dbk, mort if statement
reg_mae <- append(reg_mae, mae_v)
} #End of regression for loop
mae_vals[[k]] <- reg_mae
} ## end of cross-val loop
if (grp==1){ ###############################################
#Overall Model Matrix
nrowsOverall = length(mae_vals[[1]])
o_cols <- c("Group", "Dep", "Indep", print(paste("MAE", 1:k, sep="")))
overal_mod <- as.data.frame(matrix(NA, nrow = nrowsOverall, ncol = length(o_cols)))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- rep(grp_nm, length(nrowsOverall))
overal_mod[,2] <- rep(d_vars[dvar], nrowsOverall)
overal_mod[,3] <- pert_regs[, 3]
#To assign the error columns in a visible way/easy to summarize
for (error_col in 1:k){
overal_mod[,(error_col+3)] <- mae_vals[[error_col]]
}
} else { #depending on which Phenological Var you're on
nrowsOverall = length(pert_regs[,1]) + length(overal_mod[,1])
nrows_nw <- length(pert_regs[,1])
oldOveralmat = overal_mod
o_cols <- c("Group", "Dep", "Indep", print(paste("MAE", 1:k, sep="")))
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- append(oldOveralmat[,1], rep(grp_nm, nrows_nw))
overal_mod[,2] <- append(oldOveralmat[,2], rep(d_vars[dvar], nrows_nw))
overal_mod[,3] <- append(oldOveralmat[,3], pert_regs[, 3])
#To assign the error columns in a visible way/easy to summarize
for (error_col in 1:k){
overal_mod[,(error_col+3)] <- append(oldOveralmat[,(error_col+3)], mae_vals[[error_col]])
}
} #depending on which group loop you're on
} ## end of site/phenological loop
write.csv(overal_mod, print(paste("../05ProcessedDataOutputs/04CrossVal/", d_vars[dvar], "MAE.csv", sep="")))
}
