}
} #end family loop
dist_vec
columns <- c("Site" ,"Ecoregion", "Source", "Family", "Block", "Tree", "Condition",
"Height", "Leaders", "Distance", "ElevDist", "eFFP", "MSP", "Slope",
"Aspect", "Hardiness", "DD.5_sp")
year_dat <- as.data.frame(matrix(0, ncol = length(columns), nrow = length(yearlocdat$Site)))
colnames(year_dat) <- columns
head(year_dat)
head(yearlocdat)
#Block, Tree, Cond, Leaders, ht
year_dat$Block <- yearlocdat$Block[!is.na(yearlocdat$Name)]
year_dat$Tree <- yearlocdat$Tree[!is.na(yearlocdat$Name)]
year_dat$Condition <- yearlocdat$cond[!is.na(yearlocdat$Name)]
year_dat$Leaders <- yearlocdat$leaders[!is.na(yearlocdat$Name)]
year_dat$Height <- yearlocdat$ht[!is.na(yearlocdat$Name)]
#add distances
year_dat$Distance <- dist_vec
year_dat$ElevDist <- elevdist_vec
#add location
year_dat$Source = source_vec
year_dat$Ecoregion = eco_vec
year_dat$Family <- na.omit(yearlocdat$Name)
year_dat$Site <- rep(yearlocdat$Site[1], length(source_vec))
#add climate
#year_dat$bFFP <- clim_vec[[1]] - st_bFFP
year_dat$eFFP <- clim_vec[[2]] - st_eFFP
year_dat$MSP <- clim_vec[[3]] - st_MSP
year_dat$Slope <- clim_vec[[5]] - st_Slo
year_dat$DD.5_sp <- clim_vec[[8]] - st_DD5
##Not distance
year_dat$Hardiness <- clim_vec[[6]] #could make this a distance by subtracting min val or something
year_dat$Aspect <- clim_vec[[4]]
head(year_dat)
yr
fl
fle <- strsplit(fl, "/")[[1]][5] #just get the filename and not the path
flr
fle
yr <- gsub("[^0-9]", "", fle)
yr
if (yr == "14"){
totalsitedata = year_dat
yearcol = rep(yr, length(year_dat$Distance))
totalsitedata$Year = yearcol
} else {
## a rather convoluted way to add the dataframes together
oldtotdat = totalsitedata
totalsitedata = matrix(nrow = length(oldtotdat[,1]) + length(year_dat[,1]), ncol = length(oldtotdat[1,]))
colnames(totalsitedata) = colnames(oldtotdat)
for (ind in 1:length(year_dat)){ #Need to adjust this
totalsitedata[,ind] = append(oldtotdat[,ind], year_dat[,ind])
}
totalsitedata <- as.data.frame(totalsitedata)
#Year
newyearcol = rep(yr, length(year_dat$Distance))
totalsitedata$Year = append(oldtotdat$Year, newyearcol)
}
## a rather convoluted way to add the dataframes together
oldtotdat = totalsitedata
oldtotdat
totalsitedata = year_dat
yearcol = rep(yr, length(year_dat$Distance))
totalsitedata$Year = yearcol
head(totalsitedata)
source('~/02SideProjects/MadronePublic/MadroneCommonGarden/04ProcessingCode/033121CreateFullSiteData.R', echo=TRUE)
##Create Master File
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(vip)
#read-in functions to calucate growth and mortality
source("../04ProcessingCode/AnalysisFunctions_GRMort.R")
options(stringsAsFactors = FALSE)
#Names
years <- c(12, 13, 14, 15)
#Ecoregion data
ecoregdat <- read.csv("../01ExampleRawData/02LocationData/EcoregionData.csv")
ecoregions <- unique(ecoregdat$EcoregionShort)
sites <- c("PuyallupHill", "PuyallupValley", "Starker", "Sprague")
#Sources
sources <- unique(ecoregdat$Source)
##Get the full data files
pertfiles <- list("../03ExampleCleanedData/PVFulldata.csv", "../03ExampleCleanedData/PHFulldata.csv",  "../03ExampleCleanedData/SFFulldata.csv", "../03ExampleCleanedData/SOFulldata.csv")
sitesdata <- lapply(pertfiles,read.csv)
names(sitesdata) <- sites
locandclim <- read.csv("../01ExampleRawData/02LocationData/LocandClim_sa.csv")
a <- length(locandclim[,1])
cg_locandclim <- locandclim[c((a-3):a),]
GrowthRates = PercGrowth_byTree(sitesdata, years, sites, type="sub")
a <- GrowthRates[[1]]
head(a)
n <- sitesdata[[1]]
head(n)
#read-in functions to calucate growth and mortality
source("../04ProcessingCode/AnalysisFunctions_GRMort.R")
GrowthRates <- PercGrowth_byTree(sitesdata, years, sites, type="sub")
head(sitesdata[[1]])
datasets <- sitesdata
Growthrtdata <- list()
iter = 0
sitedata <- datasets[[1]]
iter = iter + 1
sitedata <- sitedata[!is.na(sitedata$Height),] #because those will be useless anyway
st <- as.vector(sitedata$Site[1])
sitedata$Year <- as.numeric(sitedata$Year)
sitedata$Height <- as.numeric(sitedata$Height)
#### Pulling in the environmental variables
sitedata$MSP <- as.numeric(sitedata$MSP)
sitedata$Slope <- as.numeric(sitedata$Slope)
sitedata$Aspect <- as.numeric(sitedata$Aspect)
##Growth Rate
column_names <- c("Site", "Ecoregion", "Source", "Family", "Block", "Tree", "TotGrowth", "NumDieback", "AmntDieback", "Dist",
"ElevDist", "Slope", "Aspect", "eFFP", "MSP", "DD.5.sp")
GrowthRatemat = matrix(NA, nrow = length(unique(sitedata$Family))*length(unique(sitedata$Block))*length(unique(sitedata$Tree)),
ncol = length(column_names))
colnames(GrowthRatemat) = column_names
row_ind <- 0 #so you know where to put the data in the matrix
yrs <- unique(sitedata$Year)
last_yr <- max(yrs[!is.na(yrs)])
first_yr <- min(yrs[!is.na(yrs)])
for (parent in unique(sitedata$Family)){
areadat <- sitedata[sitedata$Family == parent,]
for (block in unique(areadat$Block)){
blockdat <- areadat[areadat$Block== block,]
for (tree in unique(blockdat$Tree)){ #have to deal with multiple trees
row_ind <- row_ind + 1
treedat <- blockdat[blockdat$Tree== tree,]
if (NA %in% treedat$Condition){ #get rid of trees with unknown condition
Nanind <- match(NA, treedat$Condition)
treedat <- treedat[-Nanind,]
}
if (NA %in% treedat$Height){ #get rid of trees with unknown heights
Nanind <- match(NA, treedat$Height)
treedat <- treedat[-Nanind,]
}
treedat <- treedat[treedat$Condition != 4, ] # get rid of dead trees for height analysis
chng <- 0
if (sum(!is.na(unique(treedat$Year))) > 1){
if (last_yr %in% treedat$Year & first_yr %in% treedat$Year){
pre_post <- 100*((treedat$Height[treedat$Year== last_yr] - treedat$Height[treedat$Year== first_yr])/treedat$Height[treedat$Year== first_yr])
} else {
pre_post <- NA
}
N_dbk <- 0
dbk <- 0
#Still editing
for (yr in unique(treedat$Year[!is.na(treedat$Year)])){
if ((yr - 1)  %in% treedat$Year){
chng = 100*((treedat$Height[treedat$Year== yr] - treedat$Height[treedat$Year== (yr - 1)])/treedat$Height[treedat$Year== (yr - 1)])
} else if ((yr - 2) %in% treedat$Year){
chng = 100*((treedat$Height[treedat$Year== yr] - treedat$Height[treedat$Year== (yr - 2)])/(2*treedat$Height[treedat$Year== (yr - 2)]))
} else {
chng <- 0
}
if (chng <0){
N_dbk <- N_dbk + 1
dbk <- dbk + chng
}
} #Year loop
} else {
pre_post <- NA
N_dbk <- 0
dbk <- 0
}
##NEED TO AVERAGE AT THIS LEVEL
GrowthRatemat[row_ind, 1] = st
GrowthRatemat[row_ind, 2] = as.vector(areadat$Ecoregion[1])
GrowthRatemat[row_ind, 3] = as.vector(areadat$Source[1])
GrowthRatemat[row_ind, 4] = parent
GrowthRatemat[row_ind, 5] = block
GrowthRatemat[row_ind, 6] = tree
GrowthRatemat[row_ind, 7] = pre_post
GrowthRatemat[row_ind, 8] = N_dbk
GrowthRatemat[row_ind, 9] = abs(dbk)
GrowthRatemat[row_ind, 10] = as.numeric(areadat$Distance[1])
GrowthRatemat[row_ind, 11] = as.numeric(areadat$Slope[1])
GrowthRatemat[row_ind, 12] = as.numeric(areadat$Aspect[1])
GrowthRatemat[row_ind, 13] = as.numeric(areadat$ElevDist[1])
GrowthRatemat[row_ind, 14] = as.numeric(areadat$eFFP[1])
GrowthRatemat[row_ind, 15] = as.numeric(areadat$MSP[1])
GrowthRatemat[row_ind, 16] = as.numeric(areadat$DD.5.sp[1])
} # Tree loop
} #Block loop
} #parent loop
head(sitedata)
head(GrowthRatemat)
length(GrowthRatemat)
length(GrowthRatemat[1,])
head(areadat)
head(sitedata)
sitedata <- sitedata[!is.na(sitedata$Height),] #because those will be useless anyway
st <- as.vector(sitedata$Site[1])
sitedata$Year <- as.numeric(sitedata$Year)
sitedata$Height <- as.numeric(sitedata$Height)
#### Pulling in the environmental variables
sitedata$MSP <- as.numeric(sitedata$MSP)
sitedata$Slope <- as.numeric(sitedata$Slope)
sitedata$Aspect <- as.numeric(sitedata$Aspect)
##Growth Rate
column_names <- c("Site", "Ecoregion", "Source", "Family", "Block", "Tree", "TotGrowth", "NumDieback", "AmntDieback", "Dist",
"ElevDist", "Slope", "Aspect", "eFFP", "MSP", "DD.5_sp")
GrowthRatemat = matrix(NA, nrow = length(unique(sitedata$Family))*length(unique(sitedata$Block))*length(unique(sitedata$Tree)),
ncol = length(column_names))
colnames(GrowthRatemat) = column_names
row_ind <- 0 #so you know where to put the data in the matrix
yrs <- unique(sitedata$Year)
last_yr <- max(yrs[!is.na(yrs)])
first_yr <- min(yrs[!is.na(yrs)])
for (parent in unique(sitedata$Family)){
areadat <- sitedata[sitedata$Family == parent,]
for (block in unique(areadat$Block)){
blockdat <- areadat[areadat$Block== block,]
for (tree in unique(blockdat$Tree)){ #have to deal with multiple trees
row_ind <- row_ind + 1
treedat <- blockdat[blockdat$Tree== tree,]
if (NA %in% treedat$Condition){ #get rid of trees with unknown condition
Nanind <- match(NA, treedat$Condition)
treedat <- treedat[-Nanind,]
}
if (NA %in% treedat$Height){ #get rid of trees with unknown heights
Nanind <- match(NA, treedat$Height)
treedat <- treedat[-Nanind,]
}
treedat <- treedat[treedat$Condition != 4, ] # get rid of dead trees for height analysis
chng <- 0
if (sum(!is.na(unique(treedat$Year))) > 1){
if (last_yr %in% treedat$Year & first_yr %in% treedat$Year){
pre_post <- 100*((treedat$Height[treedat$Year== last_yr] - treedat$Height[treedat$Year== first_yr])/treedat$Height[treedat$Year== first_yr])
} else {
pre_post <- NA
}
N_dbk <- 0
dbk <- 0
#Still editing
for (yr in unique(treedat$Year[!is.na(treedat$Year)])){
if ((yr - 1)  %in% treedat$Year){
chng = 100*((treedat$Height[treedat$Year== yr] - treedat$Height[treedat$Year== (yr - 1)])/treedat$Height[treedat$Year== (yr - 1)])
} else if ((yr - 2) %in% treedat$Year){
chng = 100*((treedat$Height[treedat$Year== yr] - treedat$Height[treedat$Year== (yr - 2)])/(2*treedat$Height[treedat$Year== (yr - 2)]))
} else {
chng <- 0
}
if (chng <0){
N_dbk <- N_dbk + 1
dbk <- dbk + chng
}
} #Year loop
} else {
pre_post <- NA
N_dbk <- 0
dbk <- 0
}
##NEED TO AVERAGE AT THIS LEVEL
GrowthRatemat[row_ind, 1] = st
GrowthRatemat[row_ind, 2] = as.vector(areadat$Ecoregion[1])
GrowthRatemat[row_ind, 3] = as.vector(areadat$Source[1])
GrowthRatemat[row_ind, 4] = parent
GrowthRatemat[row_ind, 5] = block
GrowthRatemat[row_ind, 6] = tree
GrowthRatemat[row_ind, 7] = pre_post
GrowthRatemat[row_ind, 8] = N_dbk
GrowthRatemat[row_ind, 9] = abs(dbk)
GrowthRatemat[row_ind, 10] = as.numeric(areadat$Distance[1])
GrowthRatemat[row_ind, 11] = as.numeric(areadat$Slope[1])
GrowthRatemat[row_ind, 12] = as.numeric(areadat$Aspect[1])
GrowthRatemat[row_ind, 13] = as.numeric(areadat$ElevDist[1])
GrowthRatemat[row_ind, 14] = as.numeric(areadat$eFFP[1])
GrowthRatemat[row_ind, 15] = as.numeric(areadat$MSP[1])
GrowthRatemat[row_ind, 16] = as.numeric(areadat$DD.5_sp[1])
} # Tree loop
} #Block loop
} #parent loop
pre_post
parent
head(areadat)
for (parent in unique(sitedata$Family)){
areadat <- sitedata[sitedata$Family == parent,]
for (block in unique(areadat$Block)){
blockdat <- areadat[areadat$Block== block,]
for (tree in unique(blockdat$Tree)){ #have to deal with multiple trees
row_ind <- row_ind + 1
treedat <- blockdat[blockdat$Tree== tree,]
if (NA %in% treedat$Condition){ #get rid of trees with unknown condition
Nanind <- match(NA, treedat$Condition)
treedat <- treedat[-Nanind,]
}
if (NA %in% treedat$Height){ #get rid of trees with unknown heights
Nanind <- match(NA, treedat$Height)
treedat <- treedat[-Nanind,]
}
treedat <- treedat[treedat$Condition != 4, ] # get rid of dead trees for height analysis
chng <- 0
if (sum(!is.na(unique(treedat$Year))) > 1){
if (last_yr %in% treedat$Year & first_yr %in% treedat$Year){
pre_post <- 100*((treedat$Height[treedat$Year== last_yr] - treedat$Height[treedat$Year== first_yr])/treedat$Height[treedat$Year== first_yr])
} else {
pre_post <- NA
}
N_dbk <- 0
dbk <- 0
#Still editing
for (yr in unique(treedat$Year[!is.na(treedat$Year)])){
if ((yr - 1)  %in% treedat$Year){
chng = 100*((treedat$Height[treedat$Year== yr] - treedat$Height[treedat$Year== (yr - 1)])/treedat$Height[treedat$Year== (yr - 1)])
} else if ((yr - 2) %in% treedat$Year){
chng = 100*((treedat$Height[treedat$Year== yr] - treedat$Height[treedat$Year== (yr - 2)])/(2*treedat$Height[treedat$Year== (yr - 2)]))
} else {
chng <- 0
}
if (chng <0){
N_dbk <- N_dbk + 1
dbk <- dbk + chng
}
} #Year loop
} else {
pre_post <- NA
N_dbk <- 0
dbk <- 0
}
##NEED TO AVERAGE AT THIS LEVEL
GrowthRatemat[row_ind, 1] = st
GrowthRatemat[row_ind, 2] = as.vector(areadat$Ecoregion[1])
GrowthRatemat[row_ind, 3] = as.vector(areadat$Source[1])
GrowthRatemat[row_ind, 4] = parent
GrowthRatemat[row_ind, 5] = block
GrowthRatemat[row_ind, 6] = tree
GrowthRatemat[row_ind, 7] = pre_post
GrowthRatemat[row_ind, 8] = N_dbk
GrowthRatemat[row_ind, 9] = abs(dbk)
GrowthRatemat[row_ind, 10] = as.numeric(areadat$Distance[1])
GrowthRatemat[row_ind, 11] = as.numeric(areadat$Slope[1])
GrowthRatemat[row_ind, 12] = as.numeric(areadat$Aspect[1])
GrowthRatemat[row_ind, 13] = as.numeric(areadat$ElevDist[1])
GrowthRatemat[row_ind, 14] = as.numeric(areadat$eFFP[1])
GrowthRatemat[row_ind, 15] = as.numeric(areadat$MSP[1])
GrowthRatemat[row_ind, 16] = as.numeric(areadat$DD.5_sp[1])
} # Tree loop
} #Block loop
} #parent loop
parent
## Put together all the files for each source
library(ggplot2)
source('~/02SideProjects/MadronePublic/MadroneCommonGarden/02CleaningCode/01CreateFullSiteData.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(vip)
#read-in functions to calucate growth and mortality
source("../04ProcessingCode/AnalysisFunctions_GRMort.R")
options(stringsAsFactors = FALSE)
#Names
years <- c(12, 13, 14, 15)
#Ecoregion data
ecoregdat <- read.csv("../01ExampleRawData/02LocationData/EcoregionData.csv")
ecoregions <- unique(ecoregdat$EcoregionShort)
sites <- c("PuyallupHill", "PuyallupValley", "Starker", "Sprague")
#Sources
sources <- unique(ecoregdat$Source)
##Get the full data files
pertfiles <- list("../03ExampleCleanedData/PVFulldata.csv", "../03ExampleCleanedData/PHFulldata.csv",  "../03ExampleCleanedData/SFFulldata.csv", "../03ExampleCleanedData/SOFulldata.csv")
sitesdata <- lapply(pertfiles,read.csv)
names(sitesdata) <- sites
locandclim <- read.csv("../01ExampleRawData/02LocationData/LocandClim_sa.csv")
a <- length(locandclim[,1])
cg_locandclim <- locandclim[c((a-3):a),]
GrowthRates <- PercGrowth_byTree(sitesdata, years, sites, type="sub")
a <- GrowthRates[[1]]
head(a)
condata <- IndivCond_final(sitesdata, sites)
fullClim <- read.csv("../01ExampleRawData/02LocationData/WeatherData.csv")
#find the actual climate variables in the dataframe
grdbk_climvars <- c(3, 10:13, 21:99)
cond_climvars <- c(7:11, 19:97)
#data storage matrix
stomat <- as.data.frame(matrix(0, nrow=length(grdbk_climvars), ncol= c(3*4 + 1)))
colnames(stomat) <- c("ClimVar", "PVGr", "PVDBK", "PVMort", "PHGr", "PHDBK", "PHMort", "SFGr", "SFDBK", "SFMort", "SOGr", "SODBK", "SOMort")
#Iterate through the sites
for (s in 1:4){
grdbk <- merge(GrowthRates[[s]], fullClim, by="Family")
cond <- merge(condata[[s]], fullClim, by="Family")
site_ind <- (s - 1)*3 + 2 #weird but gives you the column position
for (v in 1:length(grdbk_climvars)){
#grad one of the climate variables
gd_ind <- grdbk_climvars[v]
m_ind <- cond_climvars[v]
#run the linear regressions
gr_lm <- lm(grdbk$TotGrowth ~ grdbk[,gd_ind])
dbk_lm <- lm(grdbk$AmntDieback ~ grdbk[,gd_ind])
mort_lm <- lm(cond$PercDead ~ cond[,m_ind])
var_nm <- names(grdbk)[gd_ind]
#store in the matrix
stomat[v,1] <- var_nm
stomat[v,site_ind] <- summary(gr_lm)$r.squared
stomat[v,c(site_ind + 1)] <- summary(dbk_lm)$r.squared
stomat[v,c(site_ind + 2)] <- summary(mort_lm)$r.squared
}
}
s
grdbk <- merge(GrowthRates[[s]], fullClim, by="Family")
cond <- merge(condata[[s]], fullClim, by="Family")
site_ind <- (s - 1)*3 + 2 #weird but gives you the column position
v
#grad one of the climate variables
gd_ind <- grdbk_climvars[v]
m_ind <- cond_climvars[v]
#run the linear regressions
gr_lm <- lm(grdbk$TotGrowth ~ grdbk[,gd_ind])
dbk_lm <- lm(grdbk$AmntDieback ~ grdbk[,gd_ind])
mort_lm <- lm(cond$PercDead ~ cond[,m_ind])
head(cond)
m_ind
head(cond[,19])
head(cond[,m_ind])
head(cond)
head(cond$PercDead)
unique(cond$PercDead)
cond[,1]
cond[,19]
cond_climvars
names(cond)
head(grdbk)
names(grdbk)
#find the actual climate variables in the dataframe
grdbk_climvars <- c(3, 10:13, 21:99)
cond_climvars <- c(7:11, 20:98)
#data storage matrix
stomat <- as.data.frame(matrix(0, nrow=length(grdbk_climvars), ncol= c(3*4 + 1)))
colnames(stomat) <- c("ClimVar", "PVGr", "PVDBK", "PVMort", "PHGr", "PHDBK", "PHMort", "SFGr", "SFDBK", "SFMort", "SOGr", "SODBK", "SOMort")
#Iterate through the sites
for (s in 1:4){
grdbk <- merge(GrowthRates[[s]], fullClim, by="Family")
cond <- merge(condata[[s]], fullClim, by="Family")
site_ind <- (s - 1)*3 + 2 #weird but gives you the column position
for (v in 1:length(grdbk_climvars)){
#grad one of the climate variables
gd_ind <- grdbk_climvars[v]
m_ind <- cond_climvars[v]
#run the linear regressions
gr_lm <- lm(grdbk$TotGrowth ~ grdbk[,gd_ind])
dbk_lm <- lm(grdbk$AmntDieback ~ grdbk[,gd_ind])
mort_lm <- lm(cond$PercDead ~ cond[,m_ind])
var_nm <- names(grdbk)[gd_ind]
#store in the matrix
stomat[v,1] <- var_nm
stomat[v,site_ind] <- summary(gr_lm)$r.squared
stomat[v,c(site_ind + 1)] <- summary(dbk_lm)$r.squared
stomat[v,c(site_ind + 2)] <- summary(mort_lm)$r.squared
}
}
write.csv(stomat, "../05ProcessedDataOutputs/01EnvVars/LinREgressions.csv")
#fullClim <- read.csv("../Climate Data/WeatherData.csv")
#ecoregdat
#locandclim
#all the variables of interest
varlist <- c("Latitude", "Longitude", "Slope", "Aspect", "Elevation", "DD.5_wt", "Tmax_wt", "Eref_wt", "MCMT", "DD.5_at", "Tave_wt", "DD.18_wt", "Tave_at", "DD.18_at", "DD.18", "DD.5", "MAT", "SHM", "Tmax_at", "CMD_at", "Eref_at", "eFFP.y", "DD.5_sp", "DD.18_at.1", "Tave_sp", "DD.18_sp", "Tmin_at", "Tmin_wt", "PPT_sm", "CMD", "CMD_sp", "EMT", "Eref_sp", "MSP.y", "bFFP.x")
##pairwise linear regressions
AllClim <- merge(locandclim, fullClim, by="Family")
#AllClim <- merge(AllClim, ecoregdat, by="Family")
var_inds <- match(varlist, names(AllClim))
#for iterating/comparisons
used_inds <- c()
#storage
output_mat <- as.data.frame(matrix(0, nrow=length(varlist), ncol=length(varlist)))
names(output_mat) <- varlist
rownames(output_mat) <- varlist
for (i in 1:length(varlist)){
#first variable for comparison
var1 <- AllClim[,var_inds[i]]
var1_nm <- varlist[i]
#get a list of other climate variables to compare it to
used_inds <- append(used_inds, i)
v_inds <- var_inds[-c(used_inds)]
if (length(v_inds) != 0){
for (i2 in 1:length(v_inds)){
var2 <- AllClim[, c(v_inds[i2])]
var2_nm <- varlist[match(v_inds[i2], var_inds)]
corr <- summary(lm(var1 ~ var2))$r.squared #get the r.squared value
output_mat[var1_nm, var2_nm] <- corr
}
}else {
next
}
#iterate through those other variables
}
write.csv(output_mat, "../05ProcessedDataOutputs/01EnvVars/ClimateVarCorrelations.csv")
##Adding the distance to the common garden site
for (s in 1:4){
grdbk <- merge(GrowthRates[[s]], fullClim, by="Family")
r2_DD18 <- summary(lm(DD.18_at ~ Dist, data=grdbk))$r.squared
r2_DD5 <- summary(lm(DD.5_sp ~ Dist, data=grdbk))$r.squared
print(paste("At Site", s, "R2 for DD.18_at is:", r2_DD18 ))
print(paste("At Site", s, "R2 for DD.5_sp is:", r2_DD5 ))
}
names(grdbk)
##Adding the distance to the common garden site
for (s in 1:4){
grdbk <- merge(GrowthRates[[s]], fullClim, by="Family")
r2_DD18 <- summary(lm(DD.18_at.y ~ Dist, data=grdbk))$r.squared
r2_DD5 <- summary(lm(DD.5_sp.y ~ Dist, data=grdbk))$r.squared
print(paste("At Site", s, "R2 for DD.18_at is:", r2_DD18 ))
print(paste("At Site", s, "R2 for DD.5_sp is:", r2_DD5 ))
}
##Adding the distance to the common garden site
for (s in 1:4){
grdbk <- merge(GrowthRates[[s]], fullClim, by="Family")
r2_DD18 <- summary(lm(DD.18_at ~ Dist, data=grdbk))$r.squared
r2_DD5 <- summary(lm(DD.5_sp.y ~ Dist, data=grdbk))$r.squared
print(paste("At Site", s, "R2 for DD.18_at is:", r2_DD18 ))
print(paste("At Site", s, "R2 for DD.5_sp is:", r2_DD5 ))
}
##pairwise linear regressions
f_clim <- fullClim[, c("Family", "DD.5_sp")]
ClimWNew <- merge(locandclim, f_clim, by="Family")
write.csv(ClimWNew, "../01ExampleRawData/02LocationData/LocClim.csv")
