typ_ind <- 0
for (typ in types){
typ_ind <- typ_ind + 1
if (typ == "E"){
TotNumIndep <- TotNumIndep + 6 #for all the ecoregions
TotIndepNm <- append(TotIndepNm, c("CSCD", "CSCO", "KLMT", "PULO", "SRNA", "WIVA"))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 3], 6))
} else if (typ == "L"){
TotNumIndep <- TotNumIndep + 1 #just one linear coefficient
TotIndepNm <- append(TotIndepNm, indep_vars[typ_ind])
reg_nms <- append(reg_nms, pert_regs[reg, 3])
} else if (typ == "Q"){
TotNumIndep <- TotNumIndep + 2 #because have linear and quadratic term
TotIndepNm <- append(TotIndepNm, c(indep_vars[typ_ind],
paste(indep_vars[typ_ind], "2", sep="")))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 3], 2))
}
}
RandVar <- match("Block", colnames(st_dat)) #random variable
#run regression
reg_results <- MultReg2(st_dat, indep_ind, DepVarInd, types, RandVar, family = f)
reg_df <- reg_results[[1]] #the dataframe
reg_obj <- reg_results[[2]] #the lme object
reg_sum <- summary(reg_obj)
# if (iter == 2){
#
#   aic_vals <- append(aic_vals, reg_sum$AIC)
#
#   num_pert_rws <- length(reg_int$fixed[,1])
#   num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
#   upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
#   lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
#   est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
#   p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
#
#   print(paste("The number of parameter estimates for", reg, "is", length(as.vector(reg_int$fixed[2:num_pert_rws,2]))))
#
# } else if (iter == 1){
reg_r2 <- r.squaredGLMM(reg_obj)
reg_int <- intervals(reg_obj, which = "fixed")
aic_vals <- append(aic_vals, reg_sum$AIC)
r2m_vals <- append(r2m_vals, reg_r2[1])
r2c_vals <- append(r2c_vals, reg_r2[2])
num_pert_rws <- length(reg_int$fixed[,1])
num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
print(paste("The number of parameter estimates for", reg, "is", length(as.vector(reg_int$fixed[2:num_pert_rws,2]))))
##QQPlot
print(paste("QQPlot for reg:", dvarnm, "Vars:", pert_regs[reg, 3], "at", st))
qq_plot <- qqnorm(reg_obj)
print(qq_plot)
##Heteroskedasticity
print(paste("Fitted vs Residual Plot for reg:", dvarnm, "Vars:", pert_regs[reg, 3], "at", st))
het_plot <- plot(reg_obj)
print(het_plot)
#}
} #for each regression
if (st=="PuyallupValley"){
#Overall Model Matrix
nrowsOverall = length(pert_regs[,1])
#Parameter Matrix
nrowsParam <- TotNumIndep
if (iter == 2){
r2m_vals <- rep(NA, nrowsOverall)
r2c_vals <- rep(NA, nrowsOverall)
est_param <- rep(NA, nrowsParam)
upper_int <- rep(NA, nrowsParam)
lower_int <- rep(NA, nrowsParam)
est_param <- rep(NA, nrowsParam)
p_vals <- rep(NA, nrowsParam)
}
o_cols <- c("Site", "Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- rep(st, nrowsOverall)
overal_mod[,2] <- rep(dvarnm, nrowsOverall)
overal_mod[,3] <- pert_regs[, 3]
overal_mod[,4] <- rep("Block", nrowsOverall)
overal_mod[,5] <- aic_vals
overal_mod[,6] <- r2m_vals
overal_mod[,7] <- r2c_vals
param_cols <- c("Site", "Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- rep(st, nrowsParam)
param_mat[,2] <- reg_nms
param_mat[,3] <- rep(dvarnm, nrowsParam)
param_mat[,4] <- TotIndepNm
param_mat[,5] <- est_param
param_mat[,6] <- lower_int
param_mat[,7] <- upper_int
param_mat[,8] <- p_vals
} else { #depending on which site you're on
nrows_nw <- length(pert_regs[,1])
if (iter == 2){
r2m_vals <- rep(NA, nrows_nw)
r2c_vals <- rep(NA, nrows_nw)
est_param <- rep(NA, TotNumIndep)
upper_int <- rep(NA, TotNumIndep)
lower_int <- rep(NA, TotNumIndep)
est_param <- rep(NA, TotNumIndep)
p_vals <- rep(NA, TotNumIndep)
}
#Rather convoluted way to add the matrices together
##Overall Matrix
nrowsOverall = length(pert_regs[,1]) + length(overal_mod[,1])
oldOveralmat = overal_mod
o_cols <- c("Site", "Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- append(oldOveralmat[,1], rep(st, nrows_nw))
overal_mod[,2] <- append(oldOveralmat[,2], rep(dvarnm, nrows_nw))
overal_mod[,3] <- append(oldOveralmat[,3], pert_regs[, 3])
overal_mod[,5] <- append(oldOveralmat[,5], aic_vals)
overal_mod[,6] <- append(oldOveralmat[,6], r2m_vals)
overal_mod[,7] <- append(oldOveralmat[,7], r2c_vals)
overal_mod[,4] <- append(oldOveralmat[,4], rep("Block", nrows_nw))
##Parameter Matrix
nrowsParam <- TotNumIndep + length(param_mat[,1])
oldParammat = param_mat
param_cols <- c("Site", "Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- append(oldParammat[,1], rep(st, TotNumIndep))
param_mat[,2] <- append(oldParammat[,2], reg_nms)
param_mat[,3] <- append(oldParammat[,3], rep(dvarnm, TotNumIndep))
param_mat[,4] <- append(oldParammat[,4], TotIndepNm)
param_mat[,5] <- append(oldParammat[,5], est_param)
param_mat[,6] <- append(oldParammat[,6], lower_int)
param_mat[,7] <- append(oldParammat[,7], upper_int)
param_mat[,8] <- append(oldParammat[,8], p_vals)
} #depending on which site you're on
} #site for loop
#iter <- 0
#keep this part in case you want to pull in dieback
#d_vars <- c("TotGrowth", "AmntDieback") #got rid of mortality because it needs to be done differently
fams <- c("linear", "zeroinfl")
#keep this part in case you want to pull in dieback
#for (DepVar in regdata) {#For each response variable
DepVar <- regdata[[1]]
#iter <- iter + 1
f <- fams[1]
#which dependent variable you have
#if (iter == 1){
#Get growth and dieback data
fulldata <-  PercGrowth_byTree(sitesdata, years, sites) #Growth Rate Data
#dvarnm <- d_vars[iter]
dvarnm <- "TotGrowth"
DepVarInd <- match("TotGrowth", colnames(fulldata[[1]]))
wts = FALSE
# } else if (iter == 2){
#
#   next
#
#   fulldata <- IndivCond_final(sitesdata, sites) #Mortality Data
#   dvarnm <- d_vars[iter]
#   DepVarInd <- match(dvarnm, colnames(fulldata[[1]]))
#
#   wts = FALSE
#
# }
st_ind <- 0 #so you know which site you're on (index-wise)
for (st in sites){
TotNumIndep <- 0
TotIndepNm <- c()
##Initialize parameter lists
aic_vals <- c()
r2m_vals <- c()
r2c_vals <- c()
upper_int <- c()
lower_int <- c()
est_param <- c()
p_vals <- c()
##Site index and pertinent regressions
st_ind <- st_ind + 1 #change the site index
st_dat <- fulldata[[st_ind]] #get the data for that site
st_dat <- st_dat[complete.cases(st_dat), ] #get rid of the NAs basically
pert_regs <- DepVar[(DepVar$Site == st),] #find the regressions for that site
reg_nms <- c()
for (reg in 1:length(pert_regs[,1])){ #For each regression
indep_vars <- unlist(strsplit(pert_regs$IndepVars[reg], "_")) #split the variables up
indep_ind <- match(indep_vars, colnames(st_dat)) #get the indexes for the independent variables
indep_func_ind <- match(indep_vars, paramlist) #get the index for their function types
types <- functype[indep_func_ind] #get the function types
##Add the names of/number of independent variables to the corresponding lists
typ_ind <- 0
for (typ in types){
typ_ind <- typ_ind + 1
if (typ == "E"){
TotNumIndep <- TotNumIndep + 6 #for all the ecoregions
TotIndepNm <- append(TotIndepNm, c("CSCD", "CSCO", "KLMT", "PULO", "SRNA", "WIVA"))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 3], 6))
} else if (typ == "L"){
TotNumIndep <- TotNumIndep + 1 #just one linear coefficient
TotIndepNm <- append(TotIndepNm, indep_vars[typ_ind])
reg_nms <- append(reg_nms, pert_regs[reg, 3])
} else if (typ == "Q"){
TotNumIndep <- TotNumIndep + 2 #because have linear and quadratic term
TotIndepNm <- append(TotIndepNm, c(indep_vars[typ_ind],
paste(indep_vars[typ_ind], "2", sep="")))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 3], 2))
}
}
RandVar <- match("Block", colnames(st_dat)) #random variable
#run regression
reg_results <- MultReg2(st_dat, indep_ind, DepVarInd, types, RandVar, family = f)
reg_df <- reg_results[[1]] #the dataframe
reg_obj <- reg_results[[2]] #the lme object
reg_sum <- summary(reg_obj)
# if (iter == 2){
#
#   aic_vals <- append(aic_vals, reg_sum$AIC)
#
#   num_pert_rws <- length(reg_int$fixed[,1])
#   num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
#   upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
#   lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
#   est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
#   p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
#
#   print(paste("The number of parameter estimates for", reg, "is", length(as.vector(reg_int$fixed[2:num_pert_rws,2]))))
#
# } else if (iter == 1){
reg_r2 <- r.squaredGLMM(reg_obj)
reg_int <- intervals(reg_obj, which = "fixed")
aic_vals <- append(aic_vals, reg_sum$AIC)
r2m_vals <- append(r2m_vals, reg_r2[1])
r2c_vals <- append(r2c_vals, reg_r2[2])
num_pert_rws <- length(reg_int$fixed[,1])
num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
print(paste("The number of parameter estimates for", reg, "is", length(as.vector(reg_int$fixed[2:num_pert_rws,2]))))
##QQPlot
print(paste("QQPlot for reg:", dvarnm, "Vars:", pert_regs[reg, 3], "at", st))
qq_plot <- qqnorm(reg_obj)
print(qq_plot)
##Heteroskedasticity
print(paste("Fitted vs Residual Plot for reg:", dvarnm, "Vars:", pert_regs[reg, 3], "at", st))
het_plot <- plot(reg_obj)
print(het_plot)
#}
} #for each regression
if (st=="PuyallupValley"){
#Overall Model Matrix
nrowsOverall = length(pert_regs[,1])
#Parameter Matrix
nrowsParam <- TotNumIndep
# if (iter == 2){
#     r2m_vals <- rep(NA, nrowsOverall)
#     r2c_vals <- rep(NA, nrowsOverall)
#     est_param <- rep(NA, nrowsParam)
#     upper_int <- rep(NA, nrowsParam)
#     lower_int <- rep(NA, nrowsParam)
#     est_param <- rep(NA, nrowsParam)
#     p_vals <- rep(NA, nrowsParam)
# }
o_cols <- c("Site", "Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- rep(st, nrowsOverall)
overal_mod[,2] <- rep(dvarnm, nrowsOverall)
overal_mod[,3] <- pert_regs[, 3]
overal_mod[,4] <- rep("Block", nrowsOverall)
overal_mod[,5] <- aic_vals
overal_mod[,6] <- r2m_vals
overal_mod[,7] <- r2c_vals
param_cols <- c("Site", "Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- rep(st, nrowsParam)
param_mat[,2] <- reg_nms
param_mat[,3] <- rep(dvarnm, nrowsParam)
param_mat[,4] <- TotIndepNm
param_mat[,5] <- est_param
param_mat[,6] <- lower_int
param_mat[,7] <- upper_int
param_mat[,8] <- p_vals
} else { #depending on which site you're on
nrows_nw <- length(pert_regs[,1])
if (iter == 2){
r2m_vals <- rep(NA, nrows_nw)
r2c_vals <- rep(NA, nrows_nw)
est_param <- rep(NA, TotNumIndep)
upper_int <- rep(NA, TotNumIndep)
lower_int <- rep(NA, TotNumIndep)
est_param <- rep(NA, TotNumIndep)
p_vals <- rep(NA, TotNumIndep)
}
#Rather convoluted way to add the matrices together
##Overall Matrix
nrowsOverall = length(pert_regs[,1]) + length(overal_mod[,1])
oldOveralmat = overal_mod
o_cols <- c("Site", "Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- append(oldOveralmat[,1], rep(st, nrows_nw))
overal_mod[,2] <- append(oldOveralmat[,2], rep(dvarnm, nrows_nw))
overal_mod[,3] <- append(oldOveralmat[,3], pert_regs[, 3])
overal_mod[,5] <- append(oldOveralmat[,5], aic_vals)
overal_mod[,6] <- append(oldOveralmat[,6], r2m_vals)
overal_mod[,7] <- append(oldOveralmat[,7], r2c_vals)
overal_mod[,4] <- append(oldOveralmat[,4], rep("Block", nrows_nw))
##Parameter Matrix
nrowsParam <- TotNumIndep + length(param_mat[,1])
oldParammat = param_mat
param_cols <- c("Site", "Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- append(oldParammat[,1], rep(st, TotNumIndep))
param_mat[,2] <- append(oldParammat[,2], reg_nms)
param_mat[,3] <- append(oldParammat[,3], rep(dvarnm, TotNumIndep))
param_mat[,4] <- append(oldParammat[,4], TotIndepNm)
param_mat[,5] <- append(oldParammat[,5], est_param)
param_mat[,6] <- append(oldParammat[,6], lower_int)
param_mat[,7] <- append(oldParammat[,7], upper_int)
param_mat[,8] <- append(oldParammat[,8], p_vals)
} #depending on which site you're on
} #site for loop
#iter <- 0
#keep this part in case you want to pull in dieback
#d_vars <- c("TotGrowth", "AmntDieback") #got rid of mortality because it needs to be done differently
fams <- c("linear", "zeroinfl")
#keep this part in case you want to pull in dieback
#for (DepVar in regdata) {#For each response variable
DepVar <- regdata[[1]]
#iter <- iter + 1
f <- fams[1]
#which dependent variable you have
#if (iter == 1){
#Get growth and dieback data
fulldata <-  PercGrowth_byTree(sitesdata, years, sites) #Growth Rate Data
#dvarnm <- d_vars[iter]
dvarnm <- "TotGrowth"
DepVarInd <- match("TotGrowth", colnames(fulldata[[1]]))
wts = FALSE
# } else if (iter == 2){
#
#   next
#
#   fulldata <- IndivCond_final(sitesdata, sites) #Mortality Data
#   dvarnm <- d_vars[iter]
#   DepVarInd <- match(dvarnm, colnames(fulldata[[1]]))
#
#   wts = FALSE
#
# }
st_ind <- 0 #so you know which site you're on (index-wise)
for (st in sites){
TotNumIndep <- 0
TotIndepNm <- c()
##Initialize parameter lists
aic_vals <- c()
r2m_vals <- c()
r2c_vals <- c()
upper_int <- c()
lower_int <- c()
est_param <- c()
p_vals <- c()
##Site index and pertinent regressions
st_ind <- st_ind + 1 #change the site index
st_dat <- fulldata[[st_ind]] #get the data for that site
st_dat <- st_dat[complete.cases(st_dat), ] #get rid of the NAs basically
pert_regs <- DepVar[(DepVar$Site == st),] #find the regressions for that site
reg_nms <- c()
for (reg in 1:length(pert_regs[,1])){ #For each regression
indep_vars <- unlist(strsplit(pert_regs$IndepVars[reg], "_")) #split the variables up
indep_ind <- match(indep_vars, colnames(st_dat)) #get the indexes for the independent variables
indep_func_ind <- match(indep_vars, paramlist) #get the index for their function types
types <- functype[indep_func_ind] #get the function types
##Add the names of/number of independent variables to the corresponding lists
typ_ind <- 0
for (typ in types){
typ_ind <- typ_ind + 1
if (typ == "E"){
TotNumIndep <- TotNumIndep + 6 #for all the ecoregions
TotIndepNm <- append(TotIndepNm, c("CSCD", "CSCO", "KLMT", "PULO", "SRNA", "WIVA"))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 3], 6))
} else if (typ == "L"){
TotNumIndep <- TotNumIndep + 1 #just one linear coefficient
TotIndepNm <- append(TotIndepNm, indep_vars[typ_ind])
reg_nms <- append(reg_nms, pert_regs[reg, 3])
} else if (typ == "Q"){
TotNumIndep <- TotNumIndep + 2 #because have linear and quadratic term
TotIndepNm <- append(TotIndepNm, c(indep_vars[typ_ind],
paste(indep_vars[typ_ind], "2", sep="")))
reg_nms <- append(reg_nms, rep(pert_regs[reg, 3], 2))
}
}
RandVar <- match("Block", colnames(st_dat)) #random variable
#run regression
reg_results <- MultReg2(st_dat, indep_ind, DepVarInd, types, RandVar, family = f)
reg_df <- reg_results[[1]] #the dataframe
reg_obj <- reg_results[[2]] #the lme object
reg_sum <- summary(reg_obj)
# if (iter == 2){
#
#   aic_vals <- append(aic_vals, reg_sum$AIC)
#
#   num_pert_rws <- length(reg_int$fixed[,1])
#   num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
#   upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
#   lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
#   est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
#   p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
#
#   print(paste("The number of parameter estimates for", reg, "is", length(as.vector(reg_int$fixed[2:num_pert_rws,2]))))
#
# } else if (iter == 1){
reg_r2 <- r.squaredGLMM(reg_obj)
reg_int <- intervals(reg_obj, which = "fixed")
aic_vals <- append(aic_vals, reg_sum$AIC)
r2m_vals <- append(r2m_vals, reg_r2[1])
r2c_vals <- append(r2c_vals, reg_r2[2])
num_pert_rws <- length(reg_int$fixed[,1])
num_indep <- length(indep_vars) + 1 #last index for independent variables to pay attention to
upper_int <- append(upper_int, as.vector(reg_int$fixed[2:num_pert_rws,3]))
lower_int <- append(lower_int, as.vector(reg_int$fixed[2:num_pert_rws,1]))
est_param <- append(est_param, as.vector(reg_int$fixed[2:num_pert_rws,2]))
p_vals <- append(p_vals, as.vector(reg_sum$tTable[2:num_pert_rws,5]))
print(paste("The number of parameter estimates for", reg, "is", length(as.vector(reg_int$fixed[2:num_pert_rws,2]))))
##QQPlot
print(paste("QQPlot for reg:", dvarnm, "Vars:", pert_regs[reg, 3], "at", st))
qq_plot <- qqnorm(reg_obj)
print(qq_plot)
##Heteroskedasticity
print(paste("Fitted vs Residual Plot for reg:", dvarnm, "Vars:", pert_regs[reg, 3], "at", st))
het_plot <- plot(reg_obj)
print(het_plot)
#}
} #for each regression
if (st=="PuyallupValley"){
#Overall Model Matrix
nrowsOverall = length(pert_regs[,1])
#Parameter Matrix
nrowsParam <- TotNumIndep
# if (iter == 2){
#     r2m_vals <- rep(NA, nrowsOverall)
#     r2c_vals <- rep(NA, nrowsOverall)
#     est_param <- rep(NA, nrowsParam)
#     upper_int <- rep(NA, nrowsParam)
#     lower_int <- rep(NA, nrowsParam)
#     est_param <- rep(NA, nrowsParam)
#     p_vals <- rep(NA, nrowsParam)
# }
o_cols <- c("Site", "Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- rep(st, nrowsOverall)
overal_mod[,2] <- rep(dvarnm, nrowsOverall)
overal_mod[,3] <- pert_regs[, 3]
overal_mod[,4] <- rep("Block", nrowsOverall)
overal_mod[,5] <- aic_vals
overal_mod[,6] <- r2m_vals
overal_mod[,7] <- r2c_vals
param_cols <- c("Site", "Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- rep(st, nrowsParam)
param_mat[,2] <- reg_nms
param_mat[,3] <- rep(dvarnm, nrowsParam)
param_mat[,4] <- TotIndepNm
param_mat[,5] <- est_param
param_mat[,6] <- lower_int
param_mat[,7] <- upper_int
param_mat[,8] <- p_vals
} else { #depending on which site you're on
nrows_nw <- length(pert_regs[,1])
# if (iter == 2){
#     r2m_vals <- rep(NA, nrows_nw)
#     r2c_vals <- rep(NA, nrows_nw)
#     est_param <- rep(NA, TotNumIndep)
#     upper_int <- rep(NA, TotNumIndep)
#     lower_int <- rep(NA, TotNumIndep)
#     est_param <- rep(NA, TotNumIndep)
#     p_vals <- rep(NA, TotNumIndep)
# }
#Rather convoluted way to add the matrices together
##Overall Matrix
nrowsOverall = length(pert_regs[,1]) + length(overal_mod[,1])
oldOveralmat = overal_mod
o_cols <- c("Site", "Dep", "Indep", "Rand", "AIC", "R2m", "R2c")
overal_mod <- matrix(NA, nrow = nrowsOverall, ncol = length(o_cols))
colnames(overal_mod) <- o_cols
overal_mod[,1] <- append(oldOveralmat[,1], rep(st, nrows_nw))
overal_mod[,2] <- append(oldOveralmat[,2], rep(dvarnm, nrows_nw))
overal_mod[,3] <- append(oldOveralmat[,3], pert_regs[, 3])
overal_mod[,5] <- append(oldOveralmat[,5], aic_vals)
overal_mod[,6] <- append(oldOveralmat[,6], r2m_vals)
overal_mod[,7] <- append(oldOveralmat[,7], r2c_vals)
overal_mod[,4] <- append(oldOveralmat[,4], rep("Block", nrows_nw))
##Parameter Matrix
nrowsParam <- TotNumIndep + length(param_mat[,1])
oldParammat = param_mat
param_cols <- c("Site", "Overal_Indep", "Dep", "Spec_Indep", "Estimate", "Lower", "Upper", "P_val")
param_mat <- matrix(NA, nrow = nrowsParam, ncol = length(param_cols))
colnames(param_mat) = param_cols
param_mat[,1] <- append(oldParammat[,1], rep(st, TotNumIndep))
param_mat[,2] <- append(oldParammat[,2], reg_nms)
param_mat[,3] <- append(oldParammat[,3], rep(dvarnm, TotNumIndep))
param_mat[,4] <- append(oldParammat[,4], TotIndepNm)
param_mat[,5] <- append(oldParammat[,5], est_param)
param_mat[,6] <- append(oldParammat[,6], lower_int)
param_mat[,7] <- append(oldParammat[,7], upper_int)
param_mat[,8] <- append(oldParammat[,8], p_vals)
} #depending on which site you're on
} #site for loop
